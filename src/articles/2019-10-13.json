{
  "id": 4,
  "title": "Nuxt + Express で Markdown ベースのブログを開発した",
  "created_at": "2019-10-13T00:00:00.000Z",
  "updated_at": "2019-10-13T00:00:00.000Z",
  "draft": false,
  "tags": "Nuxt.js,Vue.js,Microservices,TypeScript",
  "bodyContent": "",
  "bodyHtml": [
    "<div class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0\" id=\"readme\">",
    "<article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p>先月公開したこのブログですが、短時間での開発を目指しつつも、いくつかこだわった点があるので紹介します。</p>",
    "<p>ソースコードは<a href=\"https://github.com/kazukiyoshida/nuxt-blog\">こちら</a>に全て公開しています。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#tldr\" id=\"user-content-tldr\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>TL;DR</h2>",
    "<ul>",
    "<li><strong>Nust + Express 構成にした.</strong>",
    "<ul>",
    "<li>Microservices アーキテクチャにおける Backend For Frontoend （BFF） の個人的なサンプルになった</li>",
    "<li>サーバー内にリソースを持って Server Side Rendering （SSR） できるので高速化・効率化に繋がった</li>",
    "</ul>",
    "</li>",
    "<li><strong>GitHub を最大限活用した Markdown ベースのブログとした.</strong>",
    "<ul>",
    "<li>GitHub の Markdown エディタで執筆し、表示もそれに近いものにできた</li>",
    "<li>力技で解決した点が残った..</li>",
    "</ul>",
    "</li>",
    "<li><strong>いくつか細かい点でこだわった</strong>",
    "<ul>",
    "<li>ブラウザ上で、API経由で取得したデータをキャッシュした</li>",
    "<li>多言語対応した</li>",
    "<li>インフラに kubernetes, ingress を採用してみた</li>",
    "</ul>",
    "</li>",
    "</ul>",
    "<br/>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#nuxt--express-構成にした\" id=\"user-content-nuxt--express-構成にした\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Nuxt + Express 構成にした</h2>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#nuxt--express-構成とはどういうことか\" id=\"user-content-nuxt--express-構成とはどういうことか\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Nuxt + Express 構成とはどういうことか？</h3>",
    "<p>Vue をユニバーサルアプリケーションに拡張するためのフレームワークである Nuxt は広く普及していますが、この Nuxt が「Express のミドルウェアとして動く」",
    "というのはあまり知られていないのではないでしょうか？ 少なくとも自分は割と最近まで知らず、<a href=\"https://note.mu/takepepe/n/nba34ed1ae401\" rel=\"nofollow\">実践TypeScript</a>を読んで衝撃を覚えた記憶があります。</p>",
    "<p>Nuxt + Express 構成を概念図とすると下のような形になります。 また、 Express は API サーバーとしての機能を持たせることもできます。そのため、ブラウザの上で動いている Vue は、Express が提供する API を叩くことができます。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/feature/article/src/assets/images/nuxt%2Bexpress.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"図1. Nuxt + Express 構成\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/feature/article/src/assets/images/nuxt%2Bexpress.png\" style=\"max-width:100%;\" title=\"図1. Nuxt + Express 構成\"/></a>",
    "図1. Nuxt + Express 構成</p>",
    "<br/>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#なにが嬉しいのか\" id=\"user-content-なにが嬉しいのか\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>なにが嬉しいのか？</h3>",
    "<p>Express を中心に添えることで Nuxt 単体だとできなかったことが可能になります。",
    "（以下の例は、自分が Nuxt 単体で開発・運用した経験から感じた課題とその解決案であり、Nuxt + Express 構成で実際に大規模開発をしたわけではないです）</p>",
    "<h4><a aria-hidden=\"true\" class=\"anchor\" href=\"#例1-ビジネスロジックを担当するapiサーバーが別にあってそこがマスタデータ商品カテゴリ一覧とか地域名一覧とかを管理している場合\" id=\"user-content-例1-ビジネスロジックを担当するapiサーバーが別にあってそこがマスタデータ商品カテゴリ一覧とか地域名一覧とかを管理している場合\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>例1) ビジネスロジックを担当するAPIサーバーが別にあって、そこがマスタデータ（商品カテゴリ一覧とか、地域名一覧とか）を管理している場合</h4>",
    "<p>この場合、Nuxt単体だとユーザーからの初回リクエスト時にそのマスタデータを毎回API経由で取得する必要があります。マスタデータが更新されている可能性があるため、毎回通信が発生します。</p>",
    "<p>一方で Express + Nuxt 構成の場合、夜間バッチでマスタを定期更新することもできるし、APIサーバー側からの通知を受けて更新することもできます。またそのマスタデータもメモリに残すもよし、Redisでも良しで自由度が高いです。SSR時はそのマスタデータを直接使用するのでラウンドトリップなしでいけます。</p>",
    "<h4><a aria-hidden=\"true\" class=\"anchor\" href=\"#例2-サーバーサイドが-microservices-で構成されている場合\" id=\"user-content-例2-サーバーサイドが-microservices-で構成されている場合\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>例2) サーバーサイドが Microservices で構成されている場合</h4>",
    "<p>バックエンドのサーバーが1つだと、クライアントサイドの Vue から直接そのサーバーを叩けば良いですが、バックエンドが Microservises 構成になっている場合は話が変わります。よく Microservices の文脈では BFF アーキテクチャが紹介されますが、Exprss + Nuxt 構成はこれにぴったりなんじゃないかなと個人的に思っています。</p>",
    "<p>概念的には下の図のようになりますが、Express サーバーがフロントエンド専用の API を用意し、クライアントサイドの Vue は Express の API を叩きます。リクエストされた時は、Express はバックエンドの Microservices と gRPC などで通信しつつ、ビジネスロジックを完了する、という形です。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/feature/article/src/assets/images/bff.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"図2. BFF と Microservices\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/feature/article/src/assets/images/bff.png\" style=\"max-width:100%;\" title=\"図2. BFF と Microservices\"/></a></p>",
    "<p>図2. BFF と Microservices",
    "（出典： <a href=\"https://trackwrestlingmobileapp.blogspot.com/2018/06/mobile-app-backend-architecture.html\" rel=\"nofollow\">TRACK WRESTLING MOBILE APP</a>）</p>",
    "<br/>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#個人ブログでのメリット\" id=\"user-content-個人ブログでのメリット\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>個人ブログでのメリット</h3>",
    "<p>以上のように、Express + Nuxt 構成にすることで、そこそこ大きい規模のWebアプリケーションにも耐えられ、また BFF としても機能できる、非常に魅力的なアーキテクチャが実現できます。",
    "自分のブログは全くそのような必要はないような小さいアプリケーションですが、いつか Microservices で大きいアプリケーションを書くことを夢見てこのようにしてみました。</p>",
    "<p>とはいえ、以下のような点は、個人ブログであってもプラスに働いたと思います。</p>",
    "<ul>",
    "<li>SSR時はサーバー上に保存されたデータを直接読み取るため、API通信が発生しない</li>",
    "<li>Vue と （Express の） API で共通の Interface を参照することができる</li>",
    "</ul>",
    "<br/>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#github-を最大限活用した-markdown-ベースのブログとした\" id=\"user-content-github-を最大限活用した-markdown-ベースのブログとした\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>GitHub を最大限活用した Markdown ベースのブログとした</h2>",
    "<p>当初から記事は Markdown で執筆したいと思っていました。 Markdown ファイルから HTML を生成するツールはいくつか存在するようです（cf. <a href=\"https://jmblog.jp/posts/2018-01-17/build-a-blog-with-nuxtjs-and-markdown-1/\" rel=\"nofollow\">Nuxt.js で Markdown ベースのブログを構築する</a>）。",
    "しかし、コードスニペットなどまで含めて綺麗に表示をするには CSS の記述を頑張る必要がありました。",
    "今回は短期間での開発を目標としていたので、この点についてはバッサリと削減することにしました。代替として GitHub を使用します。</p>",
    "<p>GitHub は優れた Markdown エディタ・ビューワーを備えています。 また、重要なこととして、GitHub の Markdown CSS を MIT ライセンスで使用できる<a href=\"https://github.com/sindresorhus/github-markdown-css\">リポジトリ</a>が公開されています。<a href=\"https://github.com/sindresorhus/github-markdown-css/issues/24\">GitHub からも公開許可が出ている</a>のでラインセンスの問題は確かに解決されているようです。（GitHubの心意気がかっこいい..）</p>",
    "<p>以上を踏まえ、流れとしては</p>",
    "<ol>",
    "<li>GitHub 上で Markdown を編集する</li>",
    "<li>Preview で仕上がりを確認する</li>",
    "<li>markdown-css に対応した class が当てられた HTML を取得する</li>",
    "</ol>",
    "<p>という感じになります。ここで 3番の工程だけ綺麗に解決できず、やむおえず力技ですが dev tool を開いて HTML を取得しています。</p>",
    "<p>ということで、このブログは GitHub を使って執筆しています。使ってみると超快適です。",
    "ブランチを切って commit していけば下書き保存もできます。</p>",
    "<br/>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/feature/article/src/assets/images/github%20%2B%20markdown.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"図3. GitHub Markdown エディタでの執筆の様子\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/feature/article/src/assets/images/github%20%2B%20markdown.png\" style=\"max-width:100%;\" title=\"図3. GitHub Markdown エディタでの執筆の様子\"/></a>",
    "図3. GitHub Markdown エディタでの執筆の様子</p>",
    "<br/>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#いくつか細かい点でこだわった\" id=\"user-content-いくつか細かい点でこだわった\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>いくつか細かい点でこだわった</h2>",
    "<p>大した話ではないですが、アプリケーションの一部についてはこだわりを持って開発しました。</p>",
    "<br/>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#ブラウザ上でapi経由で取得したデータをキャッシュした\" id=\"user-content-ブラウザ上でapi経由で取得したデータをキャッシュした\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>ブラウザ上で、API経由で取得したデータをキャッシュした</h3>",
    "<p>このブログは Nuxt + Express 構成にしたことで SSR 時は API リクエストを叩いていません。しかし、CSR 時は Express が提供する API を叩いています。",
    "その際に、一度取得したデータを再び取得することがないように、オンメモリでキャッシュする仕組みを備えています。</p>",
    "<p>この Vue プロジェクトでは、API から取得するデータは全て Store に格納するようにしています。",
    "store/post.ts がブログの投稿データを取得・保存する store に当たります。</p>",
    "<p>store/post.ts</p>",
    "<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-k\">export</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">IState</span> <span class=\"pl-kos\">{</span>",
    "  <span class=\"pl-c1\">posts</span>: <span class=\"pl-smi\">IPostSummary</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>",
    "  <span class=\"pl-c1\">post</span>: <span class=\"pl-smi\">Record</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">number</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">IPost</span><span class=\"pl-kos\">&gt;</span>",
    "<span class=\"pl-kos\">}</span>",
    "",
    "<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-en\">state</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\">IState</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>",
    "  <span class=\"pl-c1\">posts</span>: <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>",
    "  <span class=\"pl-c1\">post</span>: <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>",
    "<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>",
    "",
    "<span class=\"pl-kos\">.</span><span class=\"pl-kos\">.</span><span class=\"pl-kos\">.</span>",
    "",
    "<span class=\"pl-c1\">export</span><span class=\"pl-kos\"></span> <span class=\"pl-k\">const</span> <span class=\"pl-s1\">actions</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>",
    "  <span class=\"pl-k\">async</span> <span class=\"pl-c1\">fetchPost</span><span class=\"pl-kos\">(</span>",
    "    <span class=\"pl-smi\">this</span>: <span class=\"pl-smi\">Vue</span><span class=\"pl-kos\">,</span>",
    "    <span class=\"pl-kos\">{</span> state<span class=\"pl-kos\">,</span> commit <span class=\"pl-kos\">}</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">,</span>",
    "    <span class=\"pl-s1\">id</span>: <span class=\"pl-smi\">number</span>",
    "  <span class=\"pl-kos\">)</span>: <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>",
    "    <span class=\"pl-c\">// キャッシュがあれば早期リターン</span>",
    "    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">state</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">post</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">indexOf</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">String</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> &gt;= <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span>",
    "...</pre></div>",
    "<p>Store の state.post で TypeScript の組み込み型関数である Record を使用しています。 これによって、 state.post は 「key は記事IDの number 、 value はAPI経由で取得したデータ」 というペアのオブジェクトだと定義づけられます。</p>",
    "<p>（ number型 と 記事ID は一対一対応しないので、より突き詰めるならば、記事ID型を宣言して、Record&lt;PostId, IPost&gt; とするべきですが、今回は楽をしています.. ）</p>",
    "<p>このように Recod 型の方式で store に保存することで、次に id = N の記事を API 経由で取得する際は、store に id = N の記事が保存されているかどうかを確認して、保存されていない場合だけ API リクエストを送る、ということができます。</p>",
    "<br/>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#多言語対応した\" id=\"user-content-多言語対応した\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>多言語対応した</h3>",
    "<p>ブログを作るなら多言語対応したいと思っていたので実装しました！ 今回は<a href=\"https://github.com/kazupon/vue-i18n\">vue-i18n</a>というライブラリを使用することで簡単に多言語対応ができました。kazupon さんが作ってくれた OSS ツールですね、感謝です。</p>",
    "<p>詳しい使い方は調べてもらえばたくさん日本語記事が出てくるので割愛します。</p>",
    "<br/>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#インフラに-kubernetes-ingress-を採用してみた\" id=\"user-content-インフラに-kubernetes-ingress-を採用してみた\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>インフラに kubernetes, ingress を採用してみた</h3>",
    "<p>これはずっと以前から興味を持って少しずつ勉強していたことなのですが、kubernetes を運用してみたいと思っていたので今回の個人開発で使用してみました。",
    "GKE on GCP にデプロイしたのですが、まだまだ kubernetes は初心者なのでほぼデフォルトの設定になっているかと思います。",
    "これから時間を見つけてyamlでの設定を勉強したいなあと思っています。</p>",
    "<br/>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#まとめ\" id=\"user-content-まとめ\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>まとめ</h2>",
    "<p>以上が自分の作ったブログの紹介になります。 何度かブログを開発してきたのですが、毎回「CMS機能を作り込むのに時間を割けられない」という悩みに直面し、そのため記事が書きづらく、億劫になって投稿しない...という悪循環になっていました。今回はシンプルな実装で保守しやすく、なおかつ GitHub を活用するなど、楽をして品質の良いブログアプリケーションが出来上がったと思っています。</p>",
    "<p>ブログは完成したとしていますが、まだまだやりたいことがあり、コードも出来が悪いなあと思う部分が多いです。この点については、時間をかけて改善していけたらなと思います。</p>",
    "<p>自分はフロントエンドもサーバーサイドも経験豊富という訳ではないので、この記事の内容も間違っている部分があるかもしれません。何かご指摘ありましたら、Twitter か GitHub 経由でコメントいただけると嬉しく思います。</p>",
    "</article>",
    "</div>"
  ],
  "dir": "src/articles",
  "base": "2019-10-13.json",
  "ext": ".json",
  "sourceBase": "2019-10-13.md",
  "sourceExt": ".md"
}