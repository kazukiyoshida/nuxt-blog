{
  "id": 4,
  "title": "Nuxt + Express で Markdown ベースのブログを開発した",
  "created_at": "2019-10-13T00:00:00.000Z",
  "updated_at": "2019-10-13T00:00:00.000Z",
  "draft": false,
  "tags": "Nuxt.js,Vue.js,Microservices,TypeScript",
  "bodyContent": "",
  "bodyHtml": "<article class='markdown-body entry-content p-3 p-md-6' itemprop='text'><table data-table-type='yaml-metadata'><p>先月公開したこのブログですが、短時間での開発を目指しつつも、いくつかこだわった点があるので紹介します。</p><p>ソースコードは<a href='https://github.com/kazukiyoshida/nuxt-blog'>こちら</a>に全て公開しています。</p><h2><a id='user-content-tldr' class='anchor' aria-hidden='true' href='#tldr'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>TL;DR</h2><ul><li><strong>Nust + Express 構成にした.</strong><ul><li>Microservices アーキテクチャにおける Backend For Frontoend （BFF） の個人的なサンプルになった</li><li>サーバー内にリソースを持って Server Side Rendering （SSR） できるので高速化・効率化に繋がった</li></ul></li><li><strong>GitHub を最大限活用した Markdown ベースのブログとした.</strong><ul><li>GitHub の Markdown エディタで執筆し、表示もそれに近いものにできた</li><li>想像以上に執筆しやすい環境になった</li></ul></li><li><strong>いくつか細かい点でこだわった</strong><ul><li>ブラウザ上で、API経由で取得したデータをキャッシュした</li><li>多言語対応した</li><li>インフラに kubernetes, ingress を採用してみた</li></ul></li></ul><br><h2><a id='user-content-nuxt--express-構成にした' class='anchor' aria-hidden='true' href='#nuxt--express-構成にした'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>Nuxt + Express 構成にした</h2><h3><a id='user-content-nuxt--express-構成とはどういうことか' class='anchor' aria-hidden='true' href='#nuxt--express-構成とはどういうことか'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>Nuxt + Express 構成とはどういうことか？</h3><p>Vue をユニバーサルアプリケーションに拡張するためのフレームワークである Nuxt は広く普及していますが、この Nuxt が「Express のミドルウェアとして動く」というのはあまり知られていないのではないでしょうか？ 少なくとも自分は割と最近まで知らず、<a href='https://note.mu/takepepe/n/nba34ed1ae401' rel='nofollow'>実践TypeScript</a>を読んで衝撃を覚えた記憶があります。</p><p>Nuxt + Express 構成を概念図とすると下のような形になります。 また、 Express は API サーバーとしての機能を持たせることもできます。そのため、ブラウザの上で動いている Vue は、Express が提供する API を叩くことができます。</p><p><a target='_blank' rel='noopener noreferrer' href='https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20191013/nuxt%2Bexpress.png'><img src='https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20191013/nuxt%2Bexpress.png' alt='図1. Nuxt + Express 構成' title='図1. Nuxt + Express 構成' style='max-width:100%;'></a>図1. Nuxt + Express 構成</p><br><h3><a id='user-content-なにが嬉しいのか' class='anchor' aria-hidden='true' href='#なにが嬉しいのか'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>なにが嬉しいのか？</h3><p>Express を中心に添えることで Nuxt 単体だとできなかったことが可能になります。<br>（以下の例は、自分が Nuxt 単体で開発・運用した経験から感じた課題とその解決案であり、Nuxt + Express 構成で実際に大規模開発をしたわけではないです）</p><h4><a id='user-content-例1-ビジネスロジックを担当するapiサーバーが別にあってそこがマスタデータ商品カテゴリ一覧とか地域名一覧とかを管理している場合' class='anchor' aria-hidden='true' href='#例1-ビジネスロジックを担当するapiサーバーが別にあってそこがマスタデータ商品カテゴリ一覧とか地域名一覧とかを管理している場合'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>例1) ビジネスロジックを担当するAPIサーバーが別にあって、そこがマスタデータ（商品カテゴリ一覧とか、地域名一覧とか）を管理している場合</h4><p>この場合、Nuxt単体だとユーザーからの初回リクエスト時にそのマスタデータを毎回API経由で取得する必要があります。マスタデータが更新されている可能性があるため、毎回通信が発生します。</p><p>一方で Express + Nuxt 構成の場合、夜間バッチでマスタを定期更新することもできるし、APIサーバー側からの通知を受けて更新することもできます。またそのマスタデータもメモリに残すもよし、Redisでも良しで自由度が高いです。SSR時はそのマスタデータを直接使用するのでラウンドトリップなしでいけます。</p><h4><a id='user-content-例2-サーバーサイドが-microservices-で構成されている場合' class='anchor' aria-hidden='true' href='#例2-サーバーサイドが-microservices-で構成されている場合'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>例2) サーバーサイドが Microservices で構成されている場合</h4><p>バックエンドのサーバーが1つだと、クライアントサイドの Vue から直接そのサーバーを叩けば良いですが、バックエンドが Microservises 構成になっている場合は話が変わります。よく Microservices の文脈では BFF アーキテクチャが紹介されますが、Exprss + Nuxt 構成はこれにぴったりなんじゃないかなと個人的に思っています。</p><p>概念的には下の図のようになりますが、Express サーバーがフロントエンド専用の API を用意し、クライアントサイドの Vue は Express の API を叩きます。リクエストされた時は、Express はバックエンドの Microservices と gRPC などで通信しつつ、ビジネスロジックを完了する、という形です。</p><p><a target='_blank' rel='noopener noreferrer' href='https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20191013/bff.png'><img src='https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20191013/bff.png' alt='図2. BFF と Microservices' title='図2. BFF と Microservices' style='max-width:100%;'></a></p><p>図2. BFF と Microservices<br>（出典： <a href='https://trackwrestlingmobileapp.blogspot.com/2018/06/mobile-app-backend-architecture.html' rel='nofollow'>TRACK WRESTLING MOBILE APP</a>）</p><br><h3><a id='user-content-個人ブログでのメリット' class='anchor' aria-hidden='true' href='#個人ブログでのメリット'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>個人ブログでのメリット</h3><p>以上のように、Express + Nuxt 構成にすることで、そこそこ大きい規模のWebアプリケーションにも耐えられ、また BFF としても機能できる、非常に魅力的なアーキテクチャが実現できます。自分のブログは全くそのような必要はないような小さいアプリケーションですが、いつか Microservices で大きいアプリケーションを書くことを夢見てこのようにしてみました。</p><p>とはいえ、以下のような点は、個人ブログであってもプラスに働いたと思います。</p><ul><li>SSR時はサーバー上に保存されたデータを直接読み取るため、API通信が発生しない</li><li>Vue と （Express の） API で共通の Interface を参照することができる</li></ul><br><h2><a id='user-content-github-を最大限活用した-markdown-ベースのブログとした' class='anchor' aria-hidden='true' href='#github-を最大限活用した-markdown-ベースのブログとした'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>GitHub を最大限活用した Markdown ベースのブログとした</h2><p>当初から記事は Markdown で執筆したいと思っていました。 Markdown ファイルから HTML を生成するツールはいくつか存在するようです（cf. <a href='https://jmblog.jp/posts/2018-01-17/build-a-blog-with-nuxtjs-and-markdown-1/' rel='nofollow'>Nuxt.js で Markdown ベースのブログを構築する</a>）。しかし、コードスニペットなどまで含めて綺麗に表示をするには CSS の記述を頑張る必要がありました。今回は短期間での開発を目標としていたので、この点についてはバッサリと削減することにしました。代替として GitHub を使用します。</p><p>GitHub は優れた Markdown エディタ・ビューワーを備えています。 また、重要なこととして、GitHub の Markdown CSS を MIT ライセンスで使用できる<a href='https://github.com/sindresorhus/github-markdown-css'>リポジトリ</a>が公開されています。<a href='https://github.com/sindresorhus/github-markdown-css/issues/24'>GitHub からも公開許可が出ている</a>のでラインセンスの問題は確かに解決されているようです。（GitHubの心意気がかっこいい..）</p><p>以上を踏まえ、流れとしては</p><ol><li>GitHub 上で Markdown を編集する</li><li>Preview で仕上がりを確認する</li><li>markdown-css に対応した class が当てられた HTML を取得する</li></ol><p>という感じになります。ここで 3番の工程だけ綺麗に解決できず、やむおえず力技ですが dev tool を開いて HTML を取得しています。</p><p>ということで、このブログは GitHub を使って執筆しています。使ってみると超快適です。<br>ブランチを切って commit していけば下書き保存もできます。</p><br><p><a target='_blank' rel='noopener noreferrer' href='https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20191013/github%20%2B%20markdown.png'><img src='https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20191013/github%20%2B%20markdown.png' alt='図3. GitHub Markdown エディタでの執筆の様子' title='図3. GitHub Markdown エディタでの執筆の様子' style='max-width:100%;'></a>図3. GitHub Markdown エディタでの執筆の様子</p><br><h2><a id='user-content-いくつか細かい点でこだわった' class='anchor' aria-hidden='true' href='#いくつか細かい点でこだわった'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>いくつか細かい点でこだわった</h2><p>大した話ではないですが、アプリケーションの一部についてはこだわりを持って開発しました。</p><br><h3><a id='user-content-ブラウザ上でapi経由で取得したデータをキャッシュした' class='anchor' aria-hidden='true' href='#ブラウザ上でapi経由で取得したデータをキャッシュした'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>ブラウザ上で、API経由で取得したデータをキャッシュした</h3><p>このブログは Nuxt + Express 構成にしたことで SSR 時は API リクエストを叩いていません。しかし、CSR 時は Express が提供する API を叩いています。<br>その際に、一度取得したデータを再び取得することがないように、オンメモリでキャッシュする仕組みを備えています。</p><p>この Vue プロジェクトでは、API から取得するデータは全て Store に格納するようにしています。<br>store/post.ts がブログの投稿データを取得・保存する store に当たります。</p><p>store/post.ts</p><br><div class='highlight highlight-source-ts'><pre><span class='pl-k'>export</span> <span class='pl-k'>interface</span> <span class='pl-en'>IState</span> {<br>  posts<span class='pl-k'>:</span> <span class='pl-en'>IPostSummary</span>[]<br>  post<span class='pl-k'>:</span> <span class='pl-en'>Record</span>&lt;<span class='pl-c1'>number</span>, <span class='pl-en'>IPost</span>&gt;<br>}<br><br><span class='pl-k'><span class='pl-k'>export</span></span> <span class='pl-k'><span class='pl-k'>const</span></span> state <span class='pl-k'>=</span> ()<span class='pl-k'>:</span> <span class='pl-en'>IState</span> <span class='pl-k'>=&gt;</span> ({<br>  posts: [],<br>  post: {}<br>})<br><br><span class='pl-k'>...</span> <br><br><span class='pl-k'><span class='pl-k'>export</span></span> <span class='pl-k'><span class='pl-k'>const</span></span> actions <span class='pl-k'>=</span> {<br>  <span class='pl-k'>async</span> fetchPost(<br>    <span class='pl-v'>this</span><span class='pl-k'>:</span> <span class='pl-en'>Vue</span>,<br>    { <span class='pl-v'>state</span>, <span class='pl-v'>commit</span> }<span class='pl-k'>:</span> <span class='pl-c1'>any</span>,<br>    <span class='pl-v'>id</span><span class='pl-k'>:</span> <span class='pl-c1'>number</span><br>  )<span class='pl-k'>:</span> <span class='pl-en'>Promise</span>&lt;<span class='pl-c1'>void</span>&gt; {<br>    <span class='pl-c'><span class='pl-c'>//</span> キャッシュがあれば早期リターン</span><br>    <span class='pl-k'>if</span> (<span class='pl-smi'>_</span>.<span class='pl-c1'>keys</span>(<span class='pl-smi'>state</span>.<span class='pl-smi'>post</span>).<span class='pl-c1'>indexOf</span>(<span class='pl-c1'>String</span>(<span class='pl-smi'>id</span>)) <span class='pl-k'>&gt;=</span> <span class='pl-c1'>0</span>) <span class='pl-k'>return</span><br><span class='pl-k'>...</span><br></pre><br></div><p>Store の state.post で TypeScript の組み込み型関数である Record を使用しています。 これによって、 state.post は 「key は記事IDの number 、 value はAPI経由で取得したデータ」 というペアのオブジェクトだと定義づけられます。</p><p>（ number型 と 記事ID は一対一対応しないので、より突き詰めるならば、記事ID型を宣言して、Record&lt;PostId, IPost&gt; とするべきですが、今回は楽をしています.. ）</p><p>このように Recod 型の方式で store に保存することで、次に id = N の記事を API 経由で取得する際は、store に id = N の記事が保存されているかどうかを確認して、保存されていない場合だけ API リクエストを送る、ということができます。</p><br><h3><a id='user-content-多言語対応した' class='anchor' aria-hidden='true' href='#多言語対応した'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>多言語対応した</h3><p>ブログを作るなら多言語対応したいと思っていたので実装しました！ 今回は<a href='https://github.com/kazupon/vue-i18n'>vue-i18n</a>というライブラリを使用することで簡単に多言語対応ができました。kazupon さんが作ってくれた OSS ツールですね、感謝です。</p><p>詳しい使い方は調べてもらえばたくさん日本語記事が出てくるので割愛します。</p><br><h3><a id='user-content-インフラに-kubernetes-ingress-を採用してみた' class='anchor' aria-hidden='true' href='#インフラに-kubernetes-ingress-を採用してみた'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>インフラに kubernetes, ingress を採用してみた</h3><p>これはずっと以前から興味を持って少しずつ勉強していたことなのですが、kubernetes を運用してみたいと思っていたので今回の個人開発で使用してみました。GKE on GCP にデプロイしたのですが、まだまだ kubernetes は初心者なのでほぼデフォルトの設定になっているかと思います。これから時間を見つけてyamlでの設定を勉強したいなあと思っています。</p><br><h2><a id='user-content-まとめ' class='anchor' aria-hidden='true' href='#まとめ'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'></path></svg></a>まとめ</h2><p>以上が自分の作ったブログの紹介になります。 何度かブログを開発してきたのですが、毎回「CMS機能を作り込むのに時間を割けられない」という悩みに直面し、そのため記事が書きづらく、億劫になって投稿しない...という悪循環になっていました。今回はシンプルな実装で保守しやすく、なおかつ GitHub を活用するなど、楽をして品質の良いブログアプリケーションが出来上がったと思っています。</p><p>ブログは完成したとしていますが、まだまだやりたいことがあり、コードも出来が悪いなあと思う部分が多いです。この点については、時間をかけて改善していけたらなと思います。</p><p>自分はフロントエンドもサーバーサイドも経験豊富という訳ではないので、この記事の内容も間違っている部分があるかもしれません。何かご指摘ありましたら、Twitter か GitHub 経由でコメントいただけると嬉しく思います。</p></article>",
  "dir": "src/articles",
  "base": "2019-10-13.json",
  "ext": ".json",
  "sourceBase": "2019-10-13.md",
  "sourceExt": ".md"
}
