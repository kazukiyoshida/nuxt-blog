{
  "id": 5,
  "title": "なぜRustが好きなのか",
  "created_at": "2021-01-08T00:00:00.000Z",
  "updated_at": "2021-01-08T00:00:00.000Z",
  "draft": false,
  "tags": "Rust",
  "bodyContent": "",
  "bodyHtml": [
    "<div class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0\" id=\"readme\">",
    "<article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p>「どうやら Rust は良いらしい」</p>",
    "<p>というぼんやりとした動機で勉強を始め、",
    "趣味のプロジェクトで使っていくうちに気づけば Rust の魅力にすっかりはまってしまいました。",
    "今回はこれから Rust を勉強する方、興味はあるけどきっかけがないという方に向けて、",
    "私の考える Rust の魅力（のごく一部）をまとめてみたいと思います。",
    "言語機能の細かい解説には触れませんが、Rust の哲学やその先進的な機能のいくつかを",
    "ご紹介することで、興味を持っていただければ幸いです。</p>",
    "<p>今回の記事で紹介するコードは Rust 1.49.0 stable で動作確認済です。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#なぜ-rust-が好きなのか\" id=\"user-content-なぜ-rust-が好きなのか\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>なぜ Rust が好きなのか？</h2>",
    "<p>早速ですが、私が Rust を好きな理由を要約すると</p>",
    "<p><strong>① 関数型のエッセンスを持ったモダンな言語仕様</strong> である<br/>",
    "<strong>② C言語と同等の実行速度</strong> がだせる<br/>",
    "<strong>③ メモリ安全性・データ競合安全性まで担保</strong> してくれる<br/>",
    "<strong>④ 周辺ツールが整っている</strong></p>",
    "<p>という4つにまとめられます。</p>",
    "<p>Rust は Haskell などの静的型付け関数型言語で導入されている型推論や型クラス、",
    "エラー処理などをサポートしていて、言語体系として整っている印象があります。</p>",
    "<p>Rust がサポートしている型推論や型クラス、例外を用いないエラー処理といった機能は、",
    "Haskell に代表される関数型言語で導入され有用性が証明されたものです。",
    "実際に私が Haskell を書いていた時は、そういった言語機能のおかげで綺麗にコードが",
    "書けて楽しかったのですが、その一方でライブラリが揃わないとか、気を抜くとメモリを使い過ぎる",
    "という点で、Web システムを書くのは難しいと感じていました。",
    "Rust は関数型言語の先進的な機能を取り入れながら、C 言語と同等に速いソフトウェアを書くことができ、",
    "Web 開発にも堪えるというまさに理想的な言語でした。</p>",
    "<p>さらに、実行速度と関数型の機能に加えて、Rust はメモリ安全性・データ競合安全性も担保します。",
    "この機能によって Rust で書かれたコードはコンパイル時に安全性を検査されるため、",
    "オブジェクト指向言語で発生する NullPointerException や、システムの脆弱性につながる",
    "Dangling Pointer といった問題を未然に防ぎます。さらに、比較的新しい言語ということもあり、",
    "パッケージマネージャ、テスト、ドキュメンテーションといった開発に必須のツールが",
    "公式に整備されていて、コーディングを快適に進めることができます。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#--関数型のエッセンスを持ったモダンな言語仕様\" id=\"user-content---関数型のエッセンスを持ったモダンな言語仕様\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>①  関数型のエッセンスを持ったモダンな言語仕様</h2>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#hindley-milner-型推論\" id=\"user-content-hindley-milner-型推論\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Hindley Milner 型推論</h3>",
    "<p>まず紹介したいのが、Rust の持つ強力な型推論の機能です。",
    "Rust は静的型付け言語であり型推論をサポートしているのですが、そのベースとして",
    "Haskell や OCaml など関数型言語で多く取り入れられている Hindley Milner 型推論を採用しています。</p>",
    "<p>Go、Kotlin、TypeScript など現代的な言語の多くが型推論をサポートしていますが、",
    "その多くは変数への代入や関数の引数、戻り値といったシンプルなケースで型を推論するにとどまります。</p>",
    "<p>具体的な例として、Go で文字列をパースするコードを書く場合、明示的に型を指定する必要があります。</p>",
    "<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-c\">// Go</span>",
    "<span class=\"pl-k\">var</span> <span class=\"pl-s1\">toBool</span> <span class=\"pl-smi\">bool</span>",
    "<span class=\"pl-s1\">toBool</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">strconv</span>.<span class=\"pl-en\">ParseBool</span>(<span class=\"pl-s\">\"true\"</span>)",
    "",
    "<span class=\"pl-k\">if</span> <span class=\"pl-s1\">toBool</span> {",
    "  <span class=\"pl-s1\">fmt</span>.<span class=\"pl-en\">Printf</span>(<span class=\"pl-s\">\"ok\"</span>)",
    "}</pre></div>",
    "<p>Rust が採用している Hindley Milner 型推論は非常に強力で、式の前後関係から型を一意に決定しようとします。",
    "例えば String型の関数 <code>parse&lt;F&gt;</code> はジェネリックな関数となっていて、コンパイラが 型 <code>F</code> を推論してくれます。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// Rust</span>",
    "<span class=\"pl-k\">if</span> <span class=\"pl-s\">\"true\"</span>.<span class=\"pl-en\">parse</span>().<span class=\"pl-en\">unwrap</span>() {",
    "<span class=\"pl-c\">// ~~~~~~~~~~~~~~~~~~~~~~~ if の評価式に当たるため、bool 型にパースする.</span>",
    "    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"ok\"</span>);",
    "}</pre></div>",
    "<p>実際にコードを書いてみると、驚くほどコンパイラが賢く、どんなに複雑なコードでも厳密に型をチェックしてくれます。",
    "私の体感では、一度ビルドが通ればアプリケーションはまず動作します。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#代数的データ型\" id=\"user-content-代数的データ型\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>代数的データ型</h3>",
    "<p>関数型言語で広くサポートされている代数的データ型も私の好きな機能の一つです。",
    "代数的データ型を用いると、考えているデータ空間をそのまま型として表現でき、型推論や後述する",
    "パターンマッチと組み合わせて堅牢なアプリケーションを記述できます。</p>",
    "<p>Rust はこの代数的データ型を値付き列挙型(Enum) としてサポートしています。</p>",
    "<p>具体的な例として Bitcoin のアセットクラスを型として表現してみましょう。",
    "ある取引所にはアセットクラスとして現物、無期限スワップ、1週間先物があったとします。",
    "1週間先物は満期日によって異なるので 10JUL2020, 17JUL2020,.. と続いていきますが、",
    "Rust はこれをそのまま型に落とし込むことができます。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">enum</span> <span class=\"pl-en\">Asset</span> {",
    "    BTCJPYspot,             <span class=\"pl-c\">// 現物</span>",
    "    BTCJPYperp,             <span class=\"pl-c\">// 無期限スワップ</span>",
    "    <span class=\"pl-en\">BTCJPY1week</span>(Date<span class=\"pl-k\">&lt;</span>Utc<span class=\"pl-k\">&gt;</span>), <span class=\"pl-c\">// 1週間先物（10JUL2020, 17JUL2020, ..）</span>",
    "}</pre></div>",
    "<p>イメージとしては、Enum が 1次元の有界な離散空間しか表現できなかったものが、",
    "代数的データ型によって任意の次元・構造の空間を表現できるようになった、という感覚です。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#パターンマッチ\" id=\"user-content-パターンマッチ\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>パターンマッチ</h3>",
    "<p>代数的データ型の威力を引き出すのがパターンマッチです。",
    "私自身、初めて勉強した時はオーソドックスな if構文、switch 構文との違いが分からなかったのですが、",
    "よく見てみるとパターンマッチはそれらよりも表現力がはるかに強化されています。</p>",
    "<p>パターンマッチは値による場合分けをしつつ、全てのパターンが網羅されているかをコンパイラがチェックします。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">match</span> asset {",
    "    Asset<span class=\"pl-k\">::</span>BTCJPYspot <span class=\"pl-k\">|</span> Asset<span class=\"pl-k\">::</span>BTCJPYperp           <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"現物 or 無期限スワップ\"</span>),",
    "    Asset<span class=\"pl-k\">::</span><span class=\"pl-en\">BTCJPY1week</span>(date) <span class=\"pl-k\">if</span> date <span class=\"pl-k\">&lt;</span> Utc<span class=\"pl-k\">::</span><span class=\"pl-en\">today</span>() <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"満期日が過去の1週間先物 満期日: {:?}\"</span>, date), <span class=\"pl-c\">// 条件付きパターン（ガード節）</span>",
    "    Asset<span class=\"pl-k\">::</span><span class=\"pl-en\">BTCJPY1week</span>(date)                        <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"1週間先物 満期日: {:?}\"</span>, date), <span class=\"pl-c\">// この行がないとエラー！</span>",
    "}</pre></div>",
    "<p>if構文は値によって分岐するが、パターンマッチはデータ構造に応じて分岐する、とも考えられます。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">fn</span> <span class=\"pl-en\">greet</span>(people: <span class=\"pl-k\">&amp;</span>[<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">str</span>]) {",
    "    <span class=\"pl-k\">match</span> people {",
    "        []                <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"0人..\"</span>),",
    "        [one]             <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"1人 {}\"</span>, one),",
    "        [one, two]        <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"2人 {}, {}\"</span>, one, two),",
    "        [first, .., last] <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"たくさん {}, {}\"</span>, first, last),",
    "    }",
    "}</pre></div>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#エラー処理\" id=\"user-content-エラー処理\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>エラー処理</h3>",
    "<p>これまで見たように、Rust は強力な型推論や代数的データ型、パターンマッチを備えていて、",
    "アプリケーション全体をきっちりと型で固める言語です。そんな Rust はエラー処理も同様の流儀で",
    "厳格に扱います。</p>",
    "<p>多くのオブジェクト指向言語はエラー処理を例外（Exception）と try-catch 構文によって実装します。",
    "この方法は分かりやすく素早くコードを書けるというメリットがあるものの、次のような側面もあります。</p>",
    "<ul>",
    "<li>関数内部でエラーが発生するのかどうかを型から判断できない</li>",
    "<li>エラー処理を用意するかどうかは開発者の丁寧さに委ねられている</li>",
    "</ul>",
    "<p>また、Go のように戻り値に処理の結果を添えるというエラー処理方式もありますが、",
    "これもエラーチェック漏れを検知することができません。</p>",
    "<p>Rust のエラー処理はこれらと全く異なっていて、Option型・Result型 を用いて処理の結果を厳密に管理します。",
    "処理が失敗するかどうかは型を読むことで一眼で分かりますし、処理の成功時・失敗時の両方の",
    "ケースを実装しないとコンパイルが通らないようになっています.</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">//</span>",
    "<span class=\"pl-c\">// 整数 x, y に対して x/y を計算する</span>",
    "<span class=\"pl-c\">// y が 0 の場合は計算できないため失敗 None を返し、それ以外は成功 Some(x/y) を返す</span>",
    "<span class=\"pl-c\">//</span>",
    "<span class=\"pl-k\">fn</span> <span class=\"pl-en\">divide</span>(x: <span class=\"pl-k\">i32</span>, y: <span class=\"pl-k\">i32</span>) -&gt; <span class=\"pl-k\">Option</span>&lt;<span class=\"pl-k\">i32</span>&gt; {",
    "    <span class=\"pl-k\">if</span> y <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span> { <span class=\"pl-c1\">None</span> } <span class=\"pl-k\">else</span> { <span class=\"pl-c1\">Some</span>(x <span class=\"pl-k\">/</span> y) }",
    "}</pre></div>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#トレイト\" id=\"user-content-トレイト\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>トレイト</h3>",
    "<p>Rust にはクラスや継承といった機能がなく、代わりにトレイトという、関数型言語でサポートされている",
    "機能を採用しています。トレイトは「型の振る舞い・性質」を定義したものです。</p>",
    "<p>例えば「一致の検証ができる」という性質は Eq トレイトで定義され、",
    "「順序付けができる」という性質は Ord トレイトで定義されます。",
    "整数型 u8 は一致の検証も順序付けもできるので Eq、Ord トレイトの両方を実装されていますが、",
    "文字列型 String は一致の検証はできるものの、順序付けは普通はできないので Eq トレイトのみ実装されています。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20210108/trait1.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"trait1\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20210108/trait1.png\" style=\"max-width:100%;\" width=\"700\"/></a></p>",
    "<p>オブジェクト指向言語では継承によって型の階層構造を作りますが、",
    "Rust では型の振る舞いを列挙していくので、イメージとしては水平方向の広がりになっています。",
    "ちなみにトレイトはトレイトに依存できるため、トレイトの関係性によって縦方向の広がりも存在しています。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20210108/trait2.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"trait2\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20210108/trait2.png\" style=\"max-width:100%;\" width=\"400\"/></a></p>",
    "<p>トレイトは<strong>それが何であるか</strong>を定義するという意味で宣言的な機能だと言えます。",
    "継承よりもトレイトの方が型の振る舞いをイメージしやすいので個人的に非常に気に入っています。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#--c言語に匹敵する実行速度\" id=\"user-content---c言語に匹敵する実行速度\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>②  C言語に匹敵する実行速度</h2>",
    "<p>Rust は C言語に匹敵する実行速度が出せる",
    "（<a href=\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/which-programs-are-fastest.html\" rel=\"nofollow\">あるいは C よりも速い</a>）",
    "、数少ない言語の一つです。その背景には、ゼロオーバーヘッドの原則に従うという徹底した姿勢があります。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#ゼロオーバーヘッドの原則\" id=\"user-content-ゼロオーバーヘッドの原則\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>ゼロオーバーヘッドの原則</h3>",
    "<p>ゼロオーバーヘッドの原則とは、 2005年に Bjarne Stroustrup が",
    "「<a href=\"https://www.stroustrup.com/abstraction-and-machine.pdf\" rel=\"nofollow\">Abstraction and the C++ Machine Model</a>」",
    "という論文で明言したものです。</p>",
    "<blockquote>",
    "<p>In general, C++ implementations obey the zero-overhead principle: What you",
    "don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.</p>",
    "</blockquote>",
    "<p><strong>使わない機能によってメモリやCPUのコストが発生することはなく、<br/>",
    "使った機能によるコストはアセンブラのレベルで必要最小限とならねばならない</strong> （筆者訳）</p>",
    "<p>C++ と同様に Rust もこのゼロオーバーヘッドの原則に従っていて、いろいろな機能で",
    "ゼロコスト性が意識されています。無駄な処理が実行されないようになっているので、",
    "開発者はコードを読むことで実行コストを見積もることができ、そのためリアルタイムOS や",
    "金融商品の高頻度取引システムなど、要件が厳しいプロジェクトでも Rust を採用することができます。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#ランタイムのないネイティブコードを生成する\" id=\"user-content-ランタイムのないネイティブコードを生成する\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>ランタイムのないネイティブコードを生成する</h3>",
    "<p>Rust は GC を持たずスマートポインタでメモリを管理します。 また、Go の goroutine のような",
    "グリーンスレッドを管理するランタイムも持たないため、リソース管理のオーバーヘッドが発生しません。</p>",
    "<p>開発者はランタイムを導入することも選択できます！2019年末の Rust 1.39 で async-await 構文が安定化されたので、",
    "今や非同期処理はわずか数行で導入することができます。さらに、後述するように Rust の Future はゼロコスト性も備えています。</p>",
    "<pre><code># Cargo.toml",
    "[dependencies]",
    "tokio = { version = \"1\", features = [\"full\"] }",
    "</code></pre>",
    "<div class=\"highlight highlight-source-rust\"><pre>#[tokio::main]",
    "<span class=\"pl-k\">async</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {",
    "    <span class=\"pl-k\">async</span> {",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"hello, async block\"</span>);",
    "    }.<span class=\"pl-k\">await</span>;",
    "}</pre></div>",
    "<p>また、標準 C ライブラリ musl に静的リンクしたバイナリを簡単に作れるので、",
    "scratch な Docker イメージ上でこれを実行できる点も非常に気に入っています。</p>",
    "<div class=\"highlight highlight-source-dockerfile\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Dockerfile</span>",
    "<span class=\"pl-k\">FROM</span> ekidd/rust-musl-builder:latest AS builder              # multi stage build させます. rustl-musl-builder は musl-libc や openssl など外部ライブラリを用意したイメージです.",
    "..",
    "<span class=\"pl-k\">RUN</span> cargo build --release --bin data_collection_server      # 最適化オプションや strip の実行は省略",
    "",
    "<span class=\"pl-k\">FROM</span> scratch                                                # scratch イメージ！alpine よりも小さい、最小のイメージです.",
    "<span class=\"pl-k\">COPY</span> --from=builder \\\\\"",
    "  /home/rust/src/target/x86_64-unknown-linux-musl/release/data_collection_server /",
    "..</pre></div>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#多相性とゼロコスト抽象化\" id=\"user-content-多相性とゼロコスト抽象化\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>多相性とゼロコスト抽象化</h3>",
    "<p>Rust は多相性（polymorphism）をジェネリクスとトレイトオブジェクトという 2 つの機能でサポートしています。",
    "どちらも高度な抽象化の仕組みですが、それでも開発者はメモリの使い方を完全にコントロールできます。</p>",
    "<ul>",
    "<li>ジェネリクス：コンパイル時にインライン化・最適化され、実行時は静的にディスパッチされる</li>",
    "<li>トレイトオブジェクト：動的ディスパッチによって実行される</li>",
    "</ul>",
    "<p>具体例として、スイーツセットを実装してみましょう。ジェネリックに定義したスイーツセットは",
    "静的に型が決定するため 1種類のスイーツしか選択できず、その代わりコードは最適化されます。",
    "一方で、トレイトオブジェクトによって定義されたスイーツセットにはいろいろなスイーツを詰め合わせることができます。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// 「甘いもの」という振る舞いを定義</span>",
    "<span class=\"pl-k\">trait</span> <span class=\"pl-en\">Sweet</span> {}",
    "",
    "<span class=\"pl-c\">// ドーナツ</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Donut</span>;",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Sweet</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Donut</span> {}",
    "",
    "<span class=\"pl-c\">// ケーキ</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Cake</span>;",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Sweet</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Cake</span> {}",
    "",
    "<span class=\"pl-c\">// デザートセットのメニューを定義したい..</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">DessertSetA</span>&lt;T: Sweet&gt; {     <span class=\"pl-c\">// ジェネリクスを使っているので静的ディスパッチ</span>",
    "    menu: <span class=\"pl-k\">Vec</span><span class=\"pl-k\">&lt;</span>T<span class=\"pl-k\">&gt;</span>,                  <span class=\"pl-c\">// 1種類の「甘いもの」しか選択できない（ドーナツだけ、とか）</span>",
    "}",
    "",
    "<span class=\"pl-c\">// デザートセットのメニューを定義したい..</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">DessertSetB</span> {               <span class=\"pl-c\">// トレイトオブジェクトを参照しているので動的ディスパッチ</span>",
    "    menu: <span class=\"pl-k\">Vec</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">Box</span><span class=\"pl-k\">&lt;</span>Sweet<span class=\"pl-k\">&gt;&gt;</span>,         <span class=\"pl-c\">// 複数の「甘いもの」を含められる（ドーナツ・ケーキ.. など）</span>",
    "}</pre></div>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#関数とゼロコスト抽象化\" id=\"user-content-関数とゼロコスト抽象化\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>関数とゼロコスト抽象化</h3>",
    "<p>Rust では通常の関数だけでなくクロージャも使えます。",
    "どちらも静的にディスパッチされ、インライン化・最適化が行われます。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">fn</span> <span class=\"pl-en\">add</span>(x: <span class=\"pl-k\">i32</span>) -&gt; <span class=\"pl-k\">i32</span> { x <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> }",
    "",
    "<span class=\"pl-k\">let</span> add_function: <span class=\"pl-en\">fn</span>(x: <span class=\"pl-k\">i32</span>) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">i32</span> <span class=\"pl-k\">=</span> add;            <span class=\"pl-c\">// 関数ポインタ</span>",
    "<span class=\"pl-k\">let</span> add_closure                     <span class=\"pl-k\">=</span> <span class=\"pl-k\">|</span>x: <span class=\"pl-k\">i32</span><span class=\"pl-k\">|</span> x <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>; <span class=\"pl-c\">// クロージャ（型はコンパイル時にアドホックに決定）</span>",
    "",
    "<span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-en\">add_function</span>(<span class=\"pl-c1\">1</span>)); <span class=\"pl-c\">// インライン展開され、println!(2) と同等になる（はず）</span>",
    "<span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-en\">add_closure</span>(<span class=\"pl-c1\">1</span>));  <span class=\"pl-c\">// インライン展開され、println!(2) と同等になる（はず）</span></pre></div>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#ゼロコスト-future\" id=\"user-content-ゼロコスト-future\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>ゼロコスト Future</h3>",
    "<p>Rust 1.36 で安定化された Future ですが、 JavaScript などのそれと違い<a href=\"https://blog.rust-lang.org/2019/11/07/Async-await-stable.html#zero-cost-futures\" rel=\"nofollow\">ゼロコストになるよう設計</a>",
    "されています。JavaScript の Future は作成されたら直ちにスケジューリングされるようになっていて、",
    "そのため future が作成される度にオーバーヘッドが発生します。一方で Rust の Future は",
    "await されるまで作成すらしないようになっています。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#--メモリ安全性データ競合安全性まで担保\" id=\"user-content---メモリ安全性データ競合安全性まで担保\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>③  メモリ安全性・データ競合安全性まで担保</h2>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#メモリ安全性\" id=\"user-content-メモリ安全性\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>メモリ安全性</h3>",
    "<p>Rust ではデータの所有権とライフタイムをコンパイラが精査してくれます。",
    "<a href=\"https://www.chromium.org/Home/chromium-security/memory-safety\" rel=\"nofollow\">重大度の高いセキュリティバグの約70%がメモリ安全性に起因している</a>",
    "という報告もありますが、Rust はこのような問題をコンパイル時に検出してくれます。</p>",
    "<ol>",
    "<li>Rust の変数には生存期間があります。</li>",
    "<li>Rust の変数はデータの所有権を持ちます。</li>",
    "</ol>",
    "<div class=\"highlight highlight-source-rust\"><pre>{                          <span class=\"pl-c\">// --  カッコ {  } でスコープが区切られる</span>",
    "    <span class=\"pl-k\">let</span> a <span class=\"pl-k\">=</span> <span class=\"pl-c1\">vec!</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]; <span class=\"pl-c\">//   | 変数 a がベクタの所有権を持つ.</span>",
    "}                          <span class=\"pl-c\">// --  変数 a 生存期間はここまで.</span>",
    "                           <span class=\"pl-c\">//     （所有権を持つ変数が死んだため、ヒープに確保されたベクタ[1,2,3] もこの時点で解放される）</span>",
    "",
    "<span class=\"pl-c\">// println!(\"{:?}\", a);    // a が死んでいるためコンパイルエラー</span></pre></div>",
    "<ol start=\"3\">",
    "<li>Rust はデータを <em>参照</em> することができます。</li>",
    "</ol>",
    "<p>1 ~ 3 の機能によって Rust はダングリングポインタを防ぎます。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">let</span> a;",
    "{                       <span class=\"pl-c\">// --</span>",
    "    a <span class=\"pl-k\">=</span> <span class=\"pl-k\">&amp;</span><span class=\"pl-c1\">vec!</span>[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>];   <span class=\"pl-c\">//   | 一時的にヒープにベクタ[1,2,3] を確保する. </span>",
    "                        <span class=\"pl-c\">//   | 変数 a はベクタの参照を持つ（所有権は持たない）</span>",
    "}                       <span class=\"pl-c\">// --  ベクタ[1,2,3] はこの時点で解放される</span>",
    "",
    "<span class=\"pl-c\">// println!(\"{:?}\", a); // 変数 a は生きているが、ベクタデータは解放されてるので、</span>",
    "                        <span class=\"pl-c\">// a がダングリングポインタとなり、コンパイラがこれを検知してエラー.</span></pre></div>",
    "<p>上記は機能のごく一部ですが、Rust には所有権、参照、可変参照、",
    "移動、生存期間など特有の機能があり、これらがメモリ安全性を担保してくれています。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#データ競合安全性\" id=\"user-content-データ競合安全性\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>データ競合安全性</h3>",
    "<p>並行処理プログラミングも、他の言語と比べると非常に安全に行えるようになっています。",
    "Rust ではデータの所有権が明確になっているため、スレッドを跨いだデータの共有が行われないことが検査されます。",
    "また、スレッド間で可変なオブジェクトを共有する際は、Mutex を用いて排他制御を行います。</p>",
    "<p>Rust でデータ競合安全性を担保しているのは Send、Sync という2つのトレイトです。</p>",
    "<ul>",
    "<li>Send : 所有権をスレッド間で受け渡しても安全であることを保証する</li>",
    "<li>Sync : 複数のスレッドから参照されても安全であることを保証する</li>",
    "</ul>",
    "<p>例えば参照カウンタ型 Rc は、共有参照カウントを複数のスレッドで同時にインクリメントすることになりかねないので、",
    "Send, Sync どちらも実装されていません。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">let</span> rc <span class=\"pl-k\">=</span> Rc<span class=\"pl-k\">::</span><span class=\"pl-en\">new</span>(<span class=\"pl-c1\">0</span>);",
    "thread<span class=\"pl-k\">::</span><span class=\"pl-en\">spawn</span>(<span class=\"pl-k\">move</span> <span class=\"pl-k\">||</span> { rc; }); <span class=\"pl-c\">// コンパイルエラー. Rc&lt;T&gt; は Send を実装していない.</span></pre></div>",
    "<p>基本的な型は Rust のコアチームによってスレッド安全かどうか確認されており、",
    "コンパイラはそれを Send, Sync としてチェックしています。",
    "このため Rust ではデータ競合が発生しないようになっています。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#--周辺ツールが整っている\" id=\"user-content---周辺ツールが整っている\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>④  周辺ツールが整っている</h2>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#cargo-rustup-が良い\" id=\"user-content-cargo-rustup-が良い\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>cargo, rustup が良い</h3>",
    "<p>Rust のビルドシステム &amp; パッケージマネージャ である cargo は、依存関係のあるライブラリ",
    "の管理、ユニットテストの実行、ドキュメントの生成、などの機能を揃えています。</p>",
    "<p>また Rust のツールは公式プロジェクトに含まれる rustup で管理できるので、",
    "環境構築がスムーズなのも嬉しいです。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#モジュールシステムが良い\" id=\"user-content-モジュールシステムが良い\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>モジュールシステムが良い</h3>",
    "<p>Rust のモジュールシステムはビルドターゲットがライブラリ部分とアプリケーション本体で明確に分かれています。",
    "そのため 1つのプロジェクトのなかでライブラリを開発し、それを組み合わせたアプリケーションを",
    "いくつも開発することができます。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#webassembly-に対応\" id=\"user-content-webassembly-に対応\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>WebAssembly に対応</h3>",
    "<p>Rust のコードがあればそれを WebAssembly にコンパイルすることができます。",
    "ツールが整っていて、attribute をいくつかコードに追記するだけで wasm ビルドできるので快適です。",
    "また、ランタイムがないので実行ファイルが小さいサイズになります。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#個人的に思う-rust-の弱点\" id=\"user-content-個人的に思う-rust-の弱点\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>個人的に思う Rust の弱点</h2>",
    "<p>ここまで書いたように Rust は素晴らしい言語ですが、当然いくつかのトレードオフも存在します。",
    "仕事で使う場合やプロジェクトの特性に応じて気を付けるべきと思う点を挙げてみます。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#高い学習コストエンジニア確保の難しさ\" id=\"user-content-高い学習コストエンジニア確保の難しさ\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>高い学習コスト、エンジニア確保の難しさ</h3>",
    "<p>日本語の書籍もあり、勉強しやすくなっているとは思いますが、初学者には難しく感じると思います。",
    "チームで Web 開発をするなら、Go など生産性にフォーカスした言語を選ぶのも一択だと思います。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#標準ライブラリが薄い\" id=\"user-content-標準ライブラリが薄い\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>標準ライブラリが薄い</h3>",
    "<p>HTTP クライアントや非同期ランタイムなど、重要なものもサードパーティ製クレートに依存する必要があります。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#コンパイルに時間がかかる\" id=\"user-content-コンパイルに時間がかかる\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>コンパイルに時間がかかる</h3>",
    "<p>本番向けのフルビルドを実行するとかなり時間がかかる印象があります。</p>",
    "<p>これは Docker ビルドでのテクニックですが、<a href=\"https://stackoverflow.com/questions/58473606/cache-rust-dependencies-with-docker-build\" rel=\"nofollow\">依存ライブラリをキャッシュさせるために",
    "ダミーの main 関数を仕込む</a>",
    "など、対応が必要だったりします。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#良くも悪くも循環参照のあるデータ構造が少々作りづらい\" id=\"user-content-良くも悪くも循環参照のあるデータ構造が少々作りづらい\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>（良くも悪くも）循環参照のあるデータ構造が少々作りづらい</h3>",
    "<p>グラフなど、循環参照のあるデータ構造を作る場合は内部可変性と呼ばれる特有のパターンを用いる必要があります。",
    "例えば連結リストを実装するとこんな感じになります。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">SingleLink</span> = <span class=\"pl-k\">Option</span>&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;;",
    "",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Node</span> {",
    "    value: <span class=\"pl-k\">String</span>,",
    "    next: SingleLink,",
    "}",
    "",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">LinkedList</span> {",
    "    head: SingleLink,",
    "    tail: SingleLink,",
    "    <span class=\"pl-k\">pub</span> length: <span class=\"pl-k\">u64</span>,",
    "}</pre></div>",
    "<p>一方で、これはメリットとも考えられます。<br/>",
    "<strong>Rust は所有権や生存期間の制約から、データ構造が一方向に流れるような設計を好みます。<br/>",
    "このため、書いていくうちにアプリケーション全体が自然と綺麗な構造に落ちていく印象があります。</strong></p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#浮動小数点数の丸めモードを制御できない\" id=\"user-content-浮動小数点数の丸めモードを制御できない\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>浮動小数点数の丸めモードを制御できない</h3>",
    "<p>LLVM が対応していないことが原因ですが、浮動小数点数の丸めモードを制御できないようです。",
    "プロジェクトによってはクリティカルであるため、C++ を使う必要があります。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#もしかしたら-gcp-と相性悪いかも\" id=\"user-content-もしかしたら-gcp-と相性悪いかも\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>もしかしたら GCP と相性悪いかも..？</h3>",
    "<p>GCP の公式 SDK は Rust をサポートしていないため、Rust 製アプリケーションで GCP",
    "のマネージドサービスを操作する場合、Google APIs を利用することになります。",
    "API を叩けば問題なく使えるのですが、認証などの点で少し手間がかかります。",
    "有志のクレートも開発されていますが、本番環境に採用できるかはプロジェクト次第です。</p>",
    "<p>一方で AWS は公式 SDK として <a href=\"https://github.com/rusoto/rusoto\">Rusoto</a> を提供しています。",
    "AWS は自社サービスに Rust を積極的に活用しているという情報もあるので、相性の良さで言えば AWS に軍配が上がりそうです。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#おわりに\" id=\"user-content-おわりに\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>おわりに</h2>",
    "<p>Rust は楽しく書きながら高速で安全なソフトウェアを書ける素敵な言語です。",
    "また、一度 Rust を学ぶと安全なデータ操作や例外処理について意識するようになり、",
    "他の言語を書く時でもその経験が活かされます。この記事で Rust に興味を持っていただけたら嬉しく思います。</p>",
    "<p>最後に、個人的にオススメの参考書を紹介します。少しバージョンが古いですが Rust の",
    "基本機能について計算機との関わり方を丁寧に図解しながら解説しているので、本腰を入れて",
    "勉強する場合は参考になると思います。</p>",
    "<ul>",
    "<li><a href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Rust-Jim-Blandy/dp/4873118557\" rel=\"nofollow\">プログラミングRust</a></li>",
    "</ul>",
    "</article>",
    "</div>"
  ],
  "dir": "src/articles",
  "base": "2021-01-08.json",
  "ext": ".json",
  "sourceBase": "2021-01-08.md",
  "sourceExt": ".md"
}