{
  "id": 5,
  "title": "",
  "created_at": "2021-01-08T00:00:00.000Z",
  "updated_at": "2021-01-08T00:00:00.000Z",
  "draft": false,
  "tags": "rust",
  "bodyContent": "",
  "bodyHtml": [
"  <div id='readme' class='Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0'>",
"    <article class='markdown-body entry-content container-lg' itemprop='text'><h1><a id='user-content-rust-が何故好きなのか' class='anchor' aria-hidden='true' href='#rust-が何故好きなのか'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>Rust が何故好きなのか</h1>",
"<p>いろいろな言語を触ってきましたが、Rust が格別に好きなのでその良さを書いてみます。</p>",
"<p>筆者は Rust 歴2年弱程度で、まだまだ勉強中です。<br>",
"もし間違っていることを書いていたらご指摘ください。</p>",
"<h2><a id='user-content-なぜ-rust-が好きなのか' class='anchor' aria-hidden='true' href='#なぜ-rust-が好きなのか'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>なぜ Rust が好きなのか？</h2>",
"<p>要約すると、Rust が好きな理由は</p>",
"<p><strong>① 関数型のエッセンスを持ったモダンな言語仕様</strong> を持ち、<br>",
"<strong>② C言語と同等の実行速度</strong> が出せて<br>",
"<strong>③ メモリ安全性・データ競合安全性まで担保</strong> してくれて、<br>",
"<strong>④ 周辺ツールが整っている</strong></p>",
"<p>という 4 点にあります。</p>",
"<p>それぞれの点について、自分が気に入っている点をみていきます。</p>",
"<h2><a id='user-content---関数型のエッセンスを持ったモダンな言語仕様' class='anchor' aria-hidden='true' href='#--関数型のエッセンスを持ったモダンな言語仕様'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>①  関数型のエッセンスを持ったモダンな言語仕様</h2>",
"<h3><a id='user-content-hindley-milner-型推論' class='anchor' aria-hidden='true' href='#hindley-milner-型推論'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>Hindley Milner 型推論</h3>",
"<p>Rust は静的型付け言語であり、型推論をサポートしています。<br>",
"型推論もいろいろな形式がありますが、Haskell や OCaml など関数型言語で取り入れられて",
"いる Hindley Milner 型推論をベースにしているのが特徴です。</p>",
"<p>Hindley Milner 型推論は強力で、式の前後関係から型を一意に決定しようとします。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-c'>// Rust</span>",
"<span class='pl-k'>if</span> <span class='pl-s'>'true'</span>.<span class='pl-en'>parse</span>().<span class='pl-en'>unwrap</span>() {",
"<span class='pl-c'>// ~~~~~~~~~~~~~~~~~~~~~~~ if の評価式に当たるため、bool 型にパースします.</span>",
"    <span class='pl-c1'>println!</span>(<span class='pl-s'>'ok'</span>);",
"}</pre></div>",
"<p>Go, Kotlin, TypeScript など、現代的な言語の多くに型推論はサポートされていますが HM 型推論とは異なります。<br>",
"例えば Go で同様のコードを書くなら、明示的に型を記述する必要があります。</p>",
"<div class='highlight highlight-source-go'><pre><span class='pl-c'>// Go</span>",
"<span class='pl-k'>var</span> <span class='pl-s1'>toBool</span> <span class='pl-smi'>bool</span>",
"<span class='pl-s1'>toBool</span>, <span class='pl-s1'>_</span> <span class='pl-c1'>=</span> <span class='pl-s1'>strconv</span>.<span class='pl-en'>ParseBool</span>(<span class='pl-s'>'true'</span>)",
"",
"<span class='pl-k'>if</span> <span class='pl-s1'>toBool</span> {",
"  <span class='pl-s1'>fmt</span>.<span class='pl-en'>Printf</span>(<span class='pl-s'>'ok'</span>)",
"}</pre></div>",
"<p>スニペットだと伝わりづらいですが、コンパイラがとても賢いです。<br>",
"体感では、一度ビルドが通ればほぼ動作します。</p>",
"<h3><a id='user-content-代数的データ型' class='anchor' aria-hidden='true' href='#代数的データ型'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>代数的データ型</h3>",
"<p>関数型言語で広くサポートされている代数的データ型を、Rust は「値を持つ列挙型」として取り入れています。<br>",
"代数的データ型は考えているデータ空間をそのまま表現できるので、個人的にとても好きな機能です。</p>",
"<p>例えば Bitcoin のアセットクラスとして現物、無期限スワップ、1週間先物、があったとします。<br>",
"1週間先物は満期日によって異なるので 10JUL2020, 17JUL2020, 。。 と続いていきますが、Rust ではこれをそのまま型として表現できます。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>enum</span> <span class='pl-en'>Asset</span> {",
"    BTCJPYspot,             <span class='pl-c'>// 現物</span>",
"    BTCJPYperp,             <span class='pl-c'>// 無期限スワップ</span>",
"    <span class='pl-en'>BTCJPY1week</span>(Date<span class='pl-k'>&lt;</span>Utc<span class='pl-k'>&gt;</span>), <span class='pl-c'>// 1週間先物（10JUL2020, 17JUL2020, ..）</span>",
"}</pre></div>",
"<h3><a id='user-content-パターンマッチ' class='anchor' aria-hidden='true' href='#パターンマッチ'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>パターンマッチ</h3>",
"<p>初めての方には when構文、 switch構文（どちらも本質的には if 分岐）と match式（パターンマッチ）",
"の違いが分かりづらいですが、両者は全く異なります。 パターンマッチは if 分岐よりも強力です。</p>",
"<p>パターンマッチは代数的データ型と相性が良いです。<br>",
"また、全ての分岐を網羅しているかコンパイラがチェックします。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>match</span> asset {",
"    Asset<span class='pl-k'>::</span>BTCJPYspot <span class='pl-k'>|</span> Asset<span class='pl-k'>::</span>BTCJPYperp           <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'現物 or 無期限スワップ'</span>),",
"    Asset<span class='pl-k'>::</span><span class='pl-en'>BTCJPY1week</span>(date) <span class='pl-k'>if</span> date <span class='pl-k'>&lt;</span> Utc<span class='pl-k'>::</span><span class='pl-en'>today</span>() <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'満期日が過去の1週間先物 満期日: {:?}'</span>, date), <span class='pl-c'>// 条件付きパターン（ガード節）</span>",
"    Asset<span class='pl-k'>::</span><span class='pl-en'>BTCJPY1week</span>(date)                        <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'1週間先物 満期日: {:?}'</span>, date), <span class='pl-c'>// この行がないとエラー</span>",
"}</pre></div>",
"<p>if 文は値によって分岐しますが、パターンマッチはデータ構造に応じて分岐します。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>fn</span> <span class='pl-en'>greet</span>(people: <span class='pl-k'>&amp;</span>[<span class='pl-k'>&amp;</span><span class='pl-k'>str</span>]) {",
"    <span class='pl-k'>match</span> people {",
"        []                <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'0人..'</span>),",
"        [one]             <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'1人 {}'</span>, one),",
"        [one, two]        <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'2人 {}, {}'</span>, one, two),",
"        [first, .., last] <span class='pl-k'>=&gt;</span> <span class='pl-c1'>println!</span>(<span class='pl-s'>'たくさん {}, {}'</span>, first, last),",
"    }",
"}",
"",
"<span class='pl-k'>fn</span> <span class='pl-en'>main</span>() {",
"    <span class='pl-en'>greet</span>(<span class='pl-k'>&amp;</span>[<span class='pl-s'>'John'</span>, <span class='pl-s'>'Peter'</span>, <span class='pl-s'>'Stewart'</span>]); <span class='pl-c'>// -&gt; たくさん 'John', 'Stewart'</span>",
"}</pre></div>",
"<h3><a id='user-content-エラー処理' class='anchor' aria-hidden='true' href='#エラー処理'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>エラー処理</h3>",
"<p>Rust には例外や try-catch 構文が存在せず、失敗する可能性のある処理の結果は Option 型、Result 型 を用いて厳密に管理します。</p>",
"<p>エラーを例外として扱うと、関数の型にそれが見えず、内部実装を読む必要があり、",
"エラー処理をコンパイラに検査してもらうこともできません。",
"また、Go のように結果を戻り値に添える場合も、エラー処理は開発者に任されます。</p>",
"<p>Rust では厳密にエラー処理を記述するので安心です。",
"また、便利メソッドが色々と用意されているので快適に実装できます。<br>",
"（Haskell を意識しているのかなと思っています）</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-c'>// WIP</span>",
"<span class='pl-k'>fn</span> <span class='pl-en'>create_file_buffer</span>(path: <span class='pl-k'>&amp;</span><span class='pl-k'>str</span>) -&gt; <span class='pl-k'>Result</span>&lt;BufWriter&lt;fs::File&gt;, std::io::Error&gt; {",
"    <span class='pl-k'>match</span> fs<span class='pl-k'>::</span>File<span class='pl-k'>::</span><span class='pl-en'>create</span>(path) {",
"        <span class='pl-c1'>Ok</span>(file) <span class='pl-k'>=&gt;</span> <span class='pl-c1'>Ok</span>(BufWriter<span class='pl-k'>::</span><span class='pl-en'>new</span>(file)),",
"        <span class='pl-c1'>Err</span>(e) <span class='pl-k'>=&gt;</span> <span class='pl-c1'>Err</span>(e),",
"    }",
"}",
"",
"<span class='pl-k'>fn</span> <span class='pl-en'>create_file_buffer2</span>(path: <span class='pl-k'>&amp;</span><span class='pl-k'>str</span>) -&gt; <span class='pl-k'>Result</span>&lt;BufWriter&lt;fs::File&gt;, std::io::Error&gt; {",
"    fs<span class='pl-k'>::</span>File<span class='pl-k'>::</span><span class='pl-en'>create</span>(path)",
"        .<span class='pl-en'>map</span>(<span class='pl-k'>|</span>file<span class='pl-k'>|</span> BufWriter<span class='pl-k'>::</span><span class='pl-en'>new</span>(file))",
"}</pre></div>",
"<h3><a id='user-content-トレイト' class='anchor' aria-hidden='true' href='#トレイト'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>トレイト</h3>",
"<p>TODO</p>",
"<h2><a id='user-content---c言語に匹敵する実行速度' class='anchor' aria-hidden='true' href='#--c言語に匹敵する実行速度'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>②  C言語に匹敵する実行速度</h2>",
"<p>Rust は C言語に匹敵する実行速度が出せる、数少ない言語の一つです。",
"（<a href='https://benchmarksgame-team.pages.debian.net/benchmarksgame/which-programs-are-fastest.html' rel='nofollow'>Rust は C言語(gcc) よりも早い</a>",
"という報告もあるほどです）<br>",
"その背景には、ゼロオーバーヘッドの原則に従うという徹底した姿勢があります。</p>",
"<h3><a id='user-content-ゼロオーバーヘッドの原則' class='anchor' aria-hidden='true' href='#ゼロオーバーヘッドの原則'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>ゼロオーバーヘッドの原則</h3>",
"<p>ゼロオーバーヘッドの原則とは、 Bjarne Stroustrup が C++ について",
"「<a href='https://www.stroustrup.com/abstraction-and-machine.pdf' rel='nofollow'>Abstraction and the C++ Machine Model</a>」",
"という論文で明言したものです。</p>",
"<blockquote>",
"<p>In general, C++ implementations obey the zero-overhead principle: What you",
"don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.</p>",
"</blockquote>",
"<p>正確にこれを表現することは難しいですが、筆者は<br>",
"　　<strong>使わない機能によってメモリやCPUのコストが発生することはなく、<br>",
"　　使った機能によるコストはアセンブラのレベルで必要最小限とならねばならない</strong><br>",
"という原則だと理解しています。</p>",
"<p>Rust はゼロオーバーヘッドの原則に従うとされています。 また、この原則を保ちつつ、",
"高度な抽象化の仕組みを実装することをゼロコスト抽象化と呼んでいるようです。</p>",
"<p>Rust は GC を持たずスマートポインタでメモリを管理します。 また、グリーンスレッドを管理するような",
"ランタイムも持ちません。 言語のプリミティブな操作は計算機の挙動と密接に対応するようになっています。</p>",
"<p>このような特徴のため、開発者はメモリの使い方を細かく制御することができ、実行されるコードのコストを見積もることができます。",
"そうでありながら、前述したようなモダンな機能をフル活用できます。</p>",
"<p>プロジェクトによっては事実上 C か C++ しか選択肢のなかった状況を、Rust は大きく変えてくれたと思います。</p>",
"<h3><a id='user-content-ランタイムのないネイティブコードを生成する' class='anchor' aria-hidden='true' href='#ランタイムのないネイティブコードを生成する'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>ランタイムのないネイティブコードを生成する</h3>",
"<p>上述の通り、Rust は GC を持たず、<a href='https://prev.rust-lang.org/ja-JP/faq.html#does-rust-have-a-runtime' rel='nofollow'>典型的な意味でのランタイムも持たず</a>、リソース管理のオーバーヘッドが発生しません。</p>",
"<p>開発者はランタイムを導入することも選択できます。",
"2019年末の Rust 1。39 でめでたく async-await 構文が stable サポートされたので、",
"非同期処理が快適に記述できます。 また、後述するように Rust の Future はゼロコスト性も備えています。</p>",
"<pre><code># Cargo.toml",
"[dependencies]",
"tokio = { version = '1', features = ['full'] }",
"</code></pre>",
"<div class='highlight highlight-source-rust'><pre>#[tokio::main]",
"<span class='pl-k'>async</span> <span class='pl-k'>fn</span> <span class='pl-en'>main</span>() {",
"    <span class='pl-k'>async</span> {",
"        <span class='pl-c1'>println!</span>(<span class='pl-s'>'hello, async block'</span>);",
"    }.<span class='pl-k'>await</span>;",
"}</pre></div>",
"<p>また、個人的に嬉しいのが、非常にスリムな Docker イメージを作成できる点です。<br>",
"Rust で API サーバーを書くなら Docker コンテナとしてデプロイすることになると思いますが、",
"ターゲットを <code>x86_64-unknown-linux-musl</code> とするだけで標準Cライブラリ musl に静的リンク",
"させたシングルバイナリを作成できます。<br>",
"こうすれば Linux カーネルだけ存在すれば良いので、scratch で動作します。</p>",
"<div class='highlight highlight-source-dockerfile'><pre><span class='pl-c'><span class='pl-c'>#</span> Dockerfile</span>",
"<span class='pl-k'>FROM</span> ekidd/rust-musl-builder:latest AS builder              # multi stage build させます. rustl-musl-builder は musl-libc や openssl など外部ライブラリを用意したイメージ.",
"..",
"<span class='pl-k'>RUN</span> cargo build --release --bin data_collection_server      # 最適化オプションや strip の実行は省略",
"",
"<span class='pl-k'>FROM</span> scratch                                                # scratch イメージの上にバイナリファイルを持ってきます",
"<span class='pl-k'>COPY</span> --from=builder \\",
"  /home/rust/src/target/x86_64-unknown-linux-musl/release/data_collection_server /",
"..</pre></div>",
"<h3><a id='user-content-多相性とゼロコスト抽象化' class='anchor' aria-hidden='true' href='#多相性とゼロコスト抽象化'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>多相性とゼロコスト抽象化</h3>",
"<p>Rust は多相性（polymorphism）をジェネリクスとトレイトという 2 つの機能でサポートしています。",
"どちらも高度な抽象化の仕組みですが、それでも開発者はメモリの使い方を完全にコントロールできます。</p>",
"<p>ジェネリクスで書かれたコードはコンパイル時にインライン化・最適化され、実行時は静的にディスパッチされます",
"（当然ですが、その分バイナリサイズは肥大化します）。",
"逆にトレイトで書かれたコードは動的ディスパッチによって実行されます。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-c'>// 「甘いもの」という振る舞いを定義</span>",
"<span class='pl-k'>trait</span> <span class='pl-en'>Sweet</span> {}",
"",
"<span class='pl-c'>// ドーナツ</span>",
"<span class='pl-k'>struct</span> <span class='pl-en'>Donut</span>;",
"<span class='pl-k'>impl</span> <span class='pl-en'>Sweet</span> <span class='pl-k'>for</span> <span class='pl-en'>Donut</span> {}",
"",
"<span class='pl-c'>// ケーキ</span>",
"<span class='pl-k'>struct</span> <span class='pl-en'>Cake</span>;",
"<span class='pl-k'>impl</span> <span class='pl-en'>Sweet</span> <span class='pl-k'>for</span> <span class='pl-en'>Cake</span> {}",
"",
"<span class='pl-c'>// デザートセットのメニューを定義したい..</span>",
"<span class='pl-k'>struct</span> <span class='pl-en'>DessertSetA</span>&lt;T: Sweet&gt; { <span class='pl-c'>// ジェネリクスを使っているので静的ディスパッチ</span>",
"    menu: <span class='pl-k'>Vec</span><span class='pl-k'>&lt;</span>T<span class='pl-k'>&gt;</span>,              <span class='pl-c'>// ちなみに、1種類の「甘いもの」しか選択できない（ドーナツだけ、とか）</span>",
"}",
"",
"<span class='pl-c'>// デザートセットのメニューを定義したい..</span>",
"<span class='pl-k'>struct</span> <span class='pl-en'>DessertSetB</span> {       <span class='pl-c'>// とレイトオブジェクトを参照しているので動的ディスパッチ</span>",
"    menu: <span class='pl-k'>Vec</span><span class='pl-k'>&lt;</span><span class='pl-k'>Box</span><span class='pl-k'>&lt;</span>Sweet<span class='pl-k'>&gt;&gt;</span>, <span class='pl-c'>// 複数の「甘いもの」を含められる（ドーナツ・ケーキ.. など）</span>",
"}</pre></div>",
"<h3><a id='user-content-関数とゼロコスト抽象化' class='anchor' aria-hidden='true' href='#関数とゼロコスト抽象化'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>関数とゼロコスト抽象化</h3>",
"<p>Rust では通常の関数だけでなくクロージャも使えます。",
"どちらも静的にディスパッチされ、インライン化・最適化が行われます。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>fn</span> <span class='pl-en'>add</span>(x: <span class='pl-k'>i32</span>) -&gt; <span class='pl-k'>i32</span> { x <span class='pl-k'>+</span> <span class='pl-c1'>1</span> }",
"",
"<span class='pl-k'>let</span> add_function: <span class='pl-en'>fn</span>(x: <span class='pl-k'>i32</span>) <span class='pl-k'>-</span><span class='pl-k'>&gt;</span> <span class='pl-k'>i32</span> <span class='pl-k'>=</span> add;            <span class='pl-c'>// 関数ポインタ</span>",
"<span class='pl-k'>let</span> add_closure                     <span class='pl-k'>=</span> <span class='pl-k'>|</span>x: <span class='pl-k'>i32</span><span class='pl-k'>|</span> x <span class='pl-k'>+</span> <span class='pl-c1'>1</span>; <span class='pl-c'>// クロージャ（型はコンパイル時にアドホックに決定）</span>",
"",
"<span class='pl-c1'>println!</span>(<span class='pl-s'>'{}'</span>, <span class='pl-en'>add_function</span>(<span class='pl-c1'>1</span>)); <span class='pl-c'>// インライン展開され、println!(2) と同等になる（はず）</span>",
"<span class='pl-c1'>println!</span>(<span class='pl-s'>'{}'</span>, <span class='pl-en'>add_closure</span>(<span class='pl-c1'>1</span>));  <span class='pl-c'>// インライン展開され、println!(2) と同等になる（はず）</span></pre></div>",
"<h3><a id='user-content-ゼロコスト-future' class='anchor' aria-hidden='true' href='#ゼロコスト-future'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>ゼロコスト Future</h3>",
"<p><a href='https://blog.rust-lang.org/2019/11/07/Async-await-stable.html#zero-cost-futures' rel='nofollow'>Rust 1.36 で安定化された Future は JavaScript などのそれと違いゼロコスト</a>です。</p>",
"<p>JavaScript の Future は作成されたら直ちにスケジューリングされ、そのため future が作成される度にオーバーヘッドが発生します。<br>",
"一方で Rust の Future は await されるまで作成すらしないようになっています。</p>",
"<h2><a id='user-content---メモリ安全性データ競合安全性まで担保' class='anchor' aria-hidden='true' href='#--メモリ安全性データ競合安全性まで担保'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>③  メモリ安全性・データ競合安全性まで担保</h2>",
"<h3><a id='user-content-メモリ安全性' class='anchor' aria-hidden='true' href='#メモリ安全性'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>メモリ安全性</h3>",
"<p>Rust ではデータの所有権とライフタイムをコンパイラが精査してくれます。",
"<a href='https://www.chromium.org/Home/chromium-security/memory-safety' rel='nofollow'>重大度の高いセキュリティバグの約70%がメモリ安全性に起因している</a>",
"という報告もありますが、Rust はこのような問題をコンパイル時に検出してくれます。</p>",
"<ol>",
"<li>Rust の変数には生存期間があります。</li>",
"<li>Rust の変数はデータの所有権を持ちます。</li>",
"</ol>",
"<div class='highlight highlight-source-rust'><pre>{                          <span class='pl-c'>// --  カッコ {  } でスコープが区切られる</span>",
"    <span class='pl-k'>let</span> a <span class='pl-k'>=</span> <span class='pl-c1'>vec!</span>[<span class='pl-c1'>1</span>, <span class='pl-c1'>2</span>, <span class='pl-c1'>3</span>]; <span class='pl-c'>//   | 変数 a がベクタの所有権を持つ.</span>",
"}                          <span class='pl-c'>// --  変数 a 生存期間はここまで.</span>",
"                           <span class='pl-c'>//     （所有権を持つ変数が死んだため、ヒープに確保されたベクタ[1,2,3] もこの時点で解放される）</span>",
"",
"<span class='pl-c'>// println!('{:?}', a);    // a が死んでいるためコンパイルエラー</span></pre></div>",
"<ol start='3'>",
"<li>Rust はデータを <em>参照</em> することができます。</li>",
"</ol>",
"<p>1 ~ 3 の機能によって Rust はダングリングポインタを防ぎます。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>let</span> a;",
"{                       <span class='pl-c'>// --</span>",
"    a <span class='pl-k'>=</span> <span class='pl-k'>&amp;</span><span class='pl-c1'>vec!</span>[<span class='pl-c1'>1</span>,<span class='pl-c1'>2</span>,<span class='pl-c1'>3</span>];   <span class='pl-c'>//   | 一時的にヒープにベクタ[1,2,3] を確保する. </span>",
"                        <span class='pl-c'>//   | 変数 a はベクタの参照を持つ（所有権は持たない）</span>",
"}                       <span class='pl-c'>// --  ベクタ[1,2,3] はこの時点で解放される</span>",
"",
"<span class='pl-c'>// println!('{:?}', a); // 変数 a は生きているが、ベクタデータは解放されてるので、</span>",
"                        <span class='pl-c'>// a がダングリングポインタとなり、コンパイラがこれを検知してエラー.</span></pre></div>",
"<p>上記は機能のごく一部ですが、Rust には所有権、参照、可変参照、",
"移動、生存期間など特有の機能があり、これらがメモリ安全性を担保してくれています。</p>",
"<h3><a id='user-content-データ競合安全性' class='anchor' aria-hidden='true' href='#データ競合安全性'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>データ競合安全性</h3>",
"<p>並行処理プログラミングも、他の言語と比べると安全に行えるようになっています。",
"Rust ではデータの所有権が明確になっているため、スレッドを跨いだデータの共有が行われないことが検査されます。",
"また、スレッド間で可変なオブジェクトを共有する際は、Mutex を用いて排他制御を行います。</p>",
"<p>Rust でデータ競合安全性を担保しているのは Send、Sync という2つのトレイトです。</p>",
"<ul>",
"<li>Send : 所有権をスレッド間で受け渡しても安全であることを保証する</li>",
"<li>Sync : 複数のスレッドから参照されても安全であることを保証する</li>",
"</ul>",
"<p>例えば参照カウンタ型 Rc は、共有参照カウントを複数のスレッドで同時にインクリメントすることになりかねないので、",
"Send, Sync どちらも実装されていません。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>let</span> rc <span class='pl-k'>=</span> Rc<span class='pl-k'>::</span><span class='pl-en'>new</span>(<span class='pl-c1'>0</span>);",
"<span class='pl-en'>spawn</span>(<span class='pl-k'>move</span> <span class='pl-k'>||</span> {      <span class='pl-c'>// コンパイルエラー. Rc&lt;T&gt; は Send を実装していない.</span>",
"    rc;",
"});</pre></div>",
"<p>基本的な型は Rust のコアチームによってスレッド安全かどうか確認されており、",
"コンパイラはそれを Send, Sync としてチェックしています。",
"このため Rust ではデータ競合が発生しないようになっています。</p>",
"<h2><a id='user-content---周辺ツールが整っている' class='anchor' aria-hidden='true' href='#--周辺ツールが整っている'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>④  周辺ツールが整っている</h2>",
"<h3><a id='user-content-cargo-rustup-が良い' class='anchor' aria-hidden='true' href='#cargo-rustup-が良い'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>cargo, rustup が良い</h3>",
"<p>cargo は TOML で設定を記述できるのでスッキリしています。",
"また Rust のモジュールシステムはビルドターゲットがライブラリとバイナリで明確に分かれているので、",
"1つのプロジェクトで複数の実行バイナリを用意できるのが個人的に気に入っています。</p>",
"<p>Rust のツールは公式プロジェクトに含まれる rustup で管理できるので、環境構築がスムーズで良きです。</p>",
"<h3><a id='user-content-エラーメッセージが丁寧' class='anchor' aria-hidden='true' href='#エラーメッセージが丁寧'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>エラーメッセージが丁寧</h3>",
"<p>rustc のエラーメッセージは丁寧で視覚的にも分かりやすいです（実際はカラフルに出力されます）。</p>",
"<pre><code>error[E0308]: mismatched types",
" --&gt; src/main.rs:3:22",
"  |",
"3 |         let x: f64 = i;",
"  |                ---   ^ expected `f64`, found integer",
"  |                |",
"  |                expected due to this",
"</code></pre>",
"<h3><a id='user-content-webassembly-に対応' class='anchor' aria-hidden='true' href='#webassembly-に対応'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>WebAssembly に対応</h3>",
"<p>Rust のコードがあればそれを WebAssembly にコンパイルすることができます。<br>",
"ツールが整っていて、attribute をいくつかコードに追記するだけで wasm ビルドできるので快適です。",
"また、ランタイムがないので実行ファイルが小さいサイズになります。</p>",
"<p>WebAssembly はますます発展している領域なので、それを Rust で書けるというのは嬉しい点です。</p>",
"<h2><a id='user-content-個人的に思う-rust-の弱点' class='anchor' aria-hidden='true' href='#個人的に思う-rust-の弱点'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>個人的に思う Rust の弱点</h2>",
"<p>Rust は良い点がたくさんありますが、仕事で使う場合やプロジェクトの特性によっては気をつける点もあると思います。</p>",
"<h3><a id='user-content-高い学習コストエンジニア確保の難しさ' class='anchor' aria-hidden='true' href='#高い学習コストエンジニア確保の難しさ'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>高い学習コスト、エンジニア確保の難しさ</h3>",
"<p>日本語の書籍もあり、勉強しやすくなっているとは思いますが、最初は少し難しく感じるかもしれません。<br>",
"自分の場合、チームで Web 開発をするなら Go を選ぶかも。</p>",
"<h3><a id='user-content-標準ライブラリが薄い' class='anchor' aria-hidden='true' href='#標準ライブラリが薄い'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>標準ライブラリが薄い</h3>",
"<p>HTTP クライアントや非同期ランタイムなど、重要なものも外部クレートに依存する必要があります。</p>",
"<h3><a id='user-content-コンパイルに時間がかかる' class='anchor' aria-hidden='true' href='#コンパイルに時間がかかる'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>コンパイルに時間がかかる</h3>",
"<p>本番向けのフルビルドを実行するとかなり時間がかかる印象があります。</p>",
"<p>これは Docker ビルドでのテクニックですが、<a href='https://stackoverflow.com/questions/58473606/cache-rust-dependencies-with-docker-build' rel='nofollow'>依存ライブラリをキャッシュさせるために",
"ダミーの main 関数を仕込む</a>",
"など、対応が必要だったりします。</p>",
"<h3><a id='user-content-良くも悪くも循環参照のあるデータ構造が少々作りづらい' class='anchor' aria-hidden='true' href='#良くも悪くも循環参照のあるデータ構造が少々作りづらい'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>（良くも悪くも）循環参照のあるデータ構造が少々作りづらい</h3>",
"<p>グラフなど、循環参照のあるデータ構造を作る場合は内部可変性と呼ばれる特有のパターンを用いる必要があります。<br>",
"例えば連結リストを実装するとこんな感じになります。</p>",
"<div class='highlight highlight-source-rust'><pre><span class='pl-k'>struct</span> <span class='pl-en'>Node</span> {",
"    value: <span class='pl-k'>String</span>,",
"    next: SingleLink,",
"}",
"",
"<span class='pl-k'>type</span> <span class='pl-en'>SingleLink</span> = <span class='pl-k'>Option</span>&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;;",
"",
"<span class='pl-k'>struct</span> <span class='pl-en'>LinkedList</span> {",
"    head: SingleLink,",
"    tail: SingleLink,",
"    <span class='pl-k'>pub</span> length: <span class='pl-k'>u64</span>,",
"}</pre></div>",
"<p>一方で、これはメリットとも考えられます。<br>",
"<strong>Rust は所有権や生存期間の制約から、データ構造が一方向に流れるような設計を好みます。<br>",
"このため、書いていくうちにアプリケーション全体が自然と綺麗な構造に落ちていく印象があります。</strong></p>",
"<h3><a id='user-content-浮動小数点数の丸めモードを制御できない' class='anchor' aria-hidden='true' href='#浮動小数点数の丸めモードを制御できない'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>浮動小数点数の丸めモードを制御できない</h3>",
"<p>LLVM が対応していないことが原因ですが、浮動小数点数の丸めモードを制御できないようです。<br>",
"プロジェクトによってはクリティカルであるため、C++ を使う必要があります。</p>",
"<h3><a id='user-content-現時点だと-gcp-と相性悪い' class='anchor' aria-hidden='true' href='#現時点だと-gcp-と相性悪い'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>現時点だと GCP と相性悪い..？</h3>",
"<p>GCP の公式 SDK は Rust をサポートしていません.<br>",
"そのため Rust 製アプリケーションで GCP のマネージドサービスを操作する場合",
"（例えば、CloudRun でサーバーをデプロイし、サーバーから CloudStorage にファイルをアップロードするなど）",
"、Google APIs を利用することになります。</p>",
"<p>API を叩けば問題なく使えるのですが、少し面倒だなと感じます。<br>",
"有志のクレートも開発されていますが、できれば公式にサポートしていただきたいところです..</p>",
"<p>一方で AWS は公式 SDK として <a href='https://github.com/rusoto/rusoto'>Rusoto</a> を提供しています。<br>",
"また AWS 内部で Rust チームを作って自社サービスに活用しているなど、相性の良さが伺えます。</p>",
"<p>※ <strong>自分の調査不足の可能性もあるので、勘違いしていたらご指摘ください。</strong></p>",
"<h2><a id='user-content-結論' class='anchor' aria-hidden='true' href='#結論'><svg class='octicon octicon-link' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg></a>結論</h2>",
"<p>長々と書きましたが、Rust が</p>",
"</article>",
"  </div>"
  ],
  "dir": "src/articles",
  "base": "2021-01-08.json",
  "ext": ".json",
  "sourceBase": "2021-01-08.md",
  "sourceExt": ".md"
}

