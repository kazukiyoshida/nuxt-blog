{
  "id": 8,
  "title": "Rust のアクターモデルで依存性逆転",
  "created_at": "2021-01-26T00:00:00.000Z",
  "updated_at": "2021-01-26T00:00:00.000Z",
  "draft": false,
  "tags": "Rust,Actix,Actor Model,Dependency Inversion",
  "bodyContent": "",
  "bodyHtml": [
    "<div class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0\" id=\"readme\">",
    "<article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p>アクターモデルという並行計算モデルがあります。",
    "これは Carl E. Hewitt によって1973年に発表された",
    "<a href=\"https://www.ijcai.org/Proceedings/73/Papers/027B.pdf\" rel=\"nofollow\">A Universal Modular ACTOR Formalism for Artificial Intelligence</a>",
    "という論文で提唱されたモデルで、非同期に並行動作するアクターと呼ばれるオブジェクトが",
    "メッセージを送受信して計算を行います。",
    "オブジェクト指向プログラミングでは同期的・逐次的に計算が実行されますが、",
    "アクターモデルは並行して非同期に処理が行われるのが特徴です。</p>",
    "<p>アクターモデルを活用する場合、スクラッチで実装するのは大変なのでライブラリを利用することになります。",
    "アクターモデルのライブラリは Java や Scala の <a href=\"https://akka.io/\" rel=\"nofollow\">Akka</a> が有名ですが、",
    "Rust にも <a href=\"https://github.com/actix/actix\">Actix</a> というクレートがあります。",
    "Actix は <a href=\"https://github.com/actix/actix-web\">Actix web</a> という人気の Web Application Framework のベースにもなっていて、",
    "最近では Rust stable でも動作するようになるなど活発に開発が行われています。</p>",
    "<p>今回は Actix によるアクターモデルの簡単な紹介と、開発をする中で見つけた",
    "<strong>アクターを抽象に依存させるパターン</strong>について紹介したいと思います",
    "（ただ単にジェネリクスを導入するだけですが、トレイト境界が少し見慣れない形になったのでまとめます）。",
    "また、抽象に依存するアクターを用いた実際のアプリケーションの例として、",
    "ビットコインの自動取引システムの実装をご紹介します。</p>",
    "<p>ソースコードはこちらで公開しています。<br/>",
    "<a href=\"https://github.com/kazukiyoshida/actor-polymorphism\">kazukiyoshida/actor-polymorphism</a></p>",
    "<p>使用言語は Rust 1.51.0 nightly 、動作環境は macOS Catalina 10.15.7 です。</p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#2-つのアクターが結合している系\" id=\"user-content-2-つのアクターが結合している系\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>2 つのアクターが結合している系</h2>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#messenger-アクター-と-receiver-アクター\" id=\"user-content-messenger-アクター-と-receiver-アクター\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Messenger アクター と Receiver アクター</h3>",
    "<p>基本的な系として、以下のような 2つのアクターが存在する状態を考えてみます。</p>",
    "<ul>",
    "<li>Messenger アクター：手紙 Letter を出す機能を持つ. Receiver アクターのアドレスを知っている.</li>",
    "<li>Receiver アクター：手紙 Letter を受け取る.</li>",
    "</ul>",
    "<p>これを図にすると下のようなイメージになります。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20210126/actorModel1.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"actorModel1\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20210126/actorModel1.png\" style=\"max-width:100%;\"/></a></p>",
    "<p>これをコードに落とし込んでみます。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#receiver-アクターの実装\" id=\"user-content-receiver-アクターの実装\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Receiver アクターの実装</h3>",
    "<p>まずは Receiver アクターから定義しましょう。Receiver という名前の構造体を定義して、",
    "これに actix::Actor トレイトを実装することでアクターとして振る舞うようになります。",
    "アクターは4種類の状態（Started、Running、Stopping、Stopped）を持ち、",
    "状態遷移に対応してメソッドをコールすることができます。",
    "今回はアクター起動時に標準出力を残すようにします。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// Receiver 構造体を定義する</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Receiver</span>;",
    "",
    "<span class=\"pl-c\">// Receiver 構造体に actix::Actor トレイトを実装する</span>",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Actor</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Receiver</span> {",
    "    <span class=\"pl-k\">type</span> <span class=\"pl-en\">Context</span> = Context&lt;<span class=\"pl-k\">Self</span>&gt;;",
    "",
    "    <span class=\"pl-c\">// アクター起動時の処理</span>",
    "    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">started</span>(<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-c1\">self</span>, _: <span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-k\">Self</span>::Context) {",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Receiver : start\"</span>); <span class=\"pl-c\">// 標準出力する</span>",
    "    }",
    "}</pre></div>",
    "<p>Receiver アクターは手紙 Letter を受け取ることができるようにしたいので、これを実装します。",
    "まずは手紙 Letter 構造体を定義し、これに actix::Message トレイトを自動実装することで",
    "アクターモデルのメッセージとして受け渡せるようになります。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// 手紙 Letter 構造体を定義する.</span>",
    "<span class=\"pl-c\">// Message トレイトを自動実装することで、Letter はアクターモデルのメッセージとして振る舞うようになる.</span>",
    "#[derive(Message)]",
    "#[rtype(result = <span class=\"pl-s\">\"()\"</span>)]",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Letter</span>(<span class=\"pl-k\">String</span>);</pre></div>",
    "<p>手紙 Letter が定義できたので、今度は Receiver がこれを受け取った場合に、その内容を",
    "出力するようにします。これを定義するには Receiver に <code>Handler&lt;Letter&gt;</code> トレイトを実装します。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// Receiver に Handler&lt;Letter&gt; を実装する</span>",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Handler</span>&lt;Letter&gt; <span class=\"pl-k\">for</span> <span class=\"pl-en\">Receiver</span> {",
    "    <span class=\"pl-k\">type</span> <span class=\"pl-en\">Result</span> = ();",
    "",
    "    <span class=\"pl-c\">// メッセージを受け取ったらその内容を標準出力する</span>",
    "    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">handle</span>(<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-c1\">self</span>, msg: Letter, _: <span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> Context&lt;<span class=\"pl-k\">Self</span>&gt;) -&gt; <span class=\"pl-k\">Self</span>::<span class=\"pl-k\">Result</span> {",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Receiver : got a message! &gt;&gt; {:?}\"</span>, msg.<span class=\"pl-c1\">0</span>); <span class=\"pl-c\">// 受け取ったメッセージの内容を出力する.</span>",
    "    }",
    "}</pre></div>",
    "<p>以上で Receiver が完成です。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#messenger-アクターの実装\" id=\"user-content-messenger-アクターの実装\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Messenger アクターの実装</h3>",
    "<p>次に Messenger を定義します。Messenger は Receiver のアドレスを知っている必要があるので、",
    "構造体の要素として持たせるようにします。また、アクターの起動時に Receiver に",
    "手紙 Letter を送信することにします。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// Messenger 構造体を定義する.</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Messenger</span>(Addr<span class=\"pl-k\">&lt;</span>Receiver<span class=\"pl-k\">&gt;</span>);",
    "",
    "<span class=\"pl-c\">// Messenger 構造体に Actor トレイトを実装する.</span>",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Actor</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Messenger</span> {",
    "    <span class=\"pl-k\">type</span> <span class=\"pl-en\">Context</span> = Context&lt;<span class=\"pl-k\">Self</span>&gt;;",
    "",
    "    <span class=\"pl-c\">// アクターが起動した時の振る舞い.</span>",
    "    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">started</span>(<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-c1\">self</span>, _: <span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-k\">Self</span>::Context) {",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Messenger: start\"</span>);               <span class=\"pl-c\">// 起動時に標準出力する</span>",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Messenger: send message\"</span>);",
    "        <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">0</span>.<span class=\"pl-en\">do_send</span>(<span class=\"pl-en\">Letter</span>(<span class=\"pl-s\">\"Hello!!\"</span>.<span class=\"pl-en\">to_string</span>())); <span class=\"pl-c\">// Receiver にメッセージを送信する.</span>",
    "    }",
    "}</pre></div>",
    "<p>これで Messenger の定義も完了です。</p>",
    "<h3><a aria-hidden=\"true\" class=\"anchor\" href=\"#実行\" id=\"user-content-実行\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>実行</h3>",
    "<p>上記のコードを以下の通りに実行すると標準出力が出力され、Messenger から Receiver に",
    "メッセージが送られていることが分かります。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {",
    "    <span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> sys <span class=\"pl-k\">=</span> System<span class=\"pl-k\">::</span><span class=\"pl-en\">new</span>(<span class=\"pl-s\">\"sys\"</span>);",
    "",
    "    <span class=\"pl-k\">let</span> addr_receiver <span class=\"pl-k\">=</span> sys.<span class=\"pl-en\">block_on</span>(<span class=\"pl-k\">async</span> { Receiver.<span class=\"pl-en\">start</span>() });",
    "    <span class=\"pl-k\">let</span> addr_messenger <span class=\"pl-k\">=</span> sys.<span class=\"pl-en\">block_on</span>(<span class=\"pl-k\">async</span> { <span class=\"pl-en\">Messenger</span>(addr_receiver).<span class=\"pl-en\">start</span>() });",
    "",
    "    sys.<span class=\"pl-en\">run</span>();",
    "}</pre></div>",
    "<pre><code>Receiver : start",
    "Messenger: start",
    "Messenger: send message",
    "Receiver : got a message! &gt;&gt; \"Hello!!\"",
    "</code></pre>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#2つのアクターの依存関係について\" id=\"user-content-2つのアクターの依存関係について\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>2つのアクターの依存関係について</h2>",
    "<p>今回のコードではアクター同士が明示的に依存関係を持っている形式になっています。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">struct</span> <span class=\"pl-en\">Receiver</span>;                  <span class=\"pl-c\">// &lt;--┐</span>",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Messenger</span>(Addr<span class=\"pl-k\">&lt;</span>Receiver<span class=\"pl-k\">&gt;</span>); <span class=\"pl-c\">//  --┘ Receiver に明示的に依存している</span></pre></div>",
    "<p>このようにアクター同士が強固に結びつく関係が前提となってしまうと、",
    "複数のアクターで構成するアプリケーションが全体としても強く結合したものになってしまい、",
    "再利用性が悪くなります。オブジェクト指向でアプリケーションを組む際は、",
    "インターフェイスに対して依存するようにし、実装クラスは別で用意するという",
    "依存性の逆転を使ったパターンが多く使われています。これをアクターモデルでもやりたい",
    "というのが今回のポイントです。</p>",
    "<p>この状態を図にすると下のようなイメージになります。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20210126/actorModel2.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"actorModel2\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20210126/actorModel2.png\" style=\"max-width:100%;\"/></a></p>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#アクターを抽象に依存させる\" id=\"user-content-アクターを抽象に依存させる\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>アクターを抽象に依存させる</h2>",
    "<p>アクターモデルで依存性逆転を定義するには、まずは依存関係を抽象化する必要があります。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">struct</span> <span class=\"pl-en\">Receiver</span>;",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Messenger</span>&lt;T&gt;(Addr<span class=\"pl-k\">&lt;</span>T<span class=\"pl-k\">&gt;</span>);</pre></div>",
    "<p>これで抽象に依存するようになりましたが、抽象にトレイト境界をつける必要があります。",
    "今回は「アクターであること」「メッセージ Letter を受け取れること」という 2つの条件が必要で、",
    "これを nightly で使用可能な <a href=\"https://doc.rust-lang.org/beta/unstable-book/language-features/trait-alias.html\" rel=\"nofollow\">trait_alias</a>",
    "を用いて定義します（使わなくても問題ありません）。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// trait alias によってトレイト境界をまとめる</span>",
    "<span class=\"pl-k\">trait</span> <span class=\"pl-en\">LetterHandler</span> = actix::Actor + Handler&lt;Letter&gt;;",
    "",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Receiver</span>;",
    "<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Messenger</span>&lt;T: LetterHandler&gt;(Addr<span class=\"pl-k\">&lt;</span>T<span class=\"pl-k\">&gt;</span>);</pre></div>",
    "<p>これでアクター同士の依存関係がなくなり、再利用しやすい形式になりました！",
    "最後に Messenger 構造体をアクターとして振る舞うように Actor トレイトを実装する必要があります。",
    "この時、抽象アクターの Context にもトレイト境界を宣言する必要があります。",
    "少し複雑になりますが、次のような実装になります。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// Messenger&lt;T&gt; に Actor を実装します</span>",
    "<span class=\"pl-k\">impl</span>&lt;T&gt; <span class=\"pl-en\">Actor</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Messenger</span>&lt;T&gt;",
    "<span class=\"pl-k\">where</span>                                  <span class=\"pl-c\">// T にトレイト境界を宣言します</span>",
    "    <span class=\"pl-en\">T</span>: <span class=\"pl-en\">LetterHandler</span>,                  <span class=\"pl-c\">// ・T は LetterHandler トレイトを実装していないといけない</span>",
    "    <span class=\"pl-en\">T</span>::<span class=\"pl-en\">Context</span>: <span class=\"pl-en\">ToEnvelope</span>&lt;T, Letter&gt;, <span class=\"pl-c\">// ・T は（上の境界によって）アクターだが、アクターのコンテキストが ToEnvelope を実装している必要がある</span>",
    "{",
    "    <span class=\"pl-k\">type</span> <span class=\"pl-en\">Context</span> = Context&lt;<span class=\"pl-k\">Self</span>&gt;;",
    "",
    "    <span class=\"pl-c\">// アクター起動時の処理</span>",
    "    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">started</span>(<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-c1\">self</span>, _: <span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-k\">Self</span>::Context) {",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Messenger: start\"</span>);",
    "",
    "        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Messenger: send message\"</span>);",
    "        <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">0</span>.<span class=\"pl-en\">do_send</span>(<span class=\"pl-en\">Letter</span>(<span class=\"pl-s\">\"Hello!!\"</span>.<span class=\"pl-en\">to_string</span>()));  <span class=\"pl-c\">// T にメッセージを送る</span>",
    "    }",
    "}</pre></div>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#応用例ビットコイン自動取引システムのアクターモデルでの実装\" id=\"user-content-応用例ビットコイン自動取引システムのアクターモデルでの実装\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>応用例：ビットコイン自動取引システムのアクターモデルでの実装</h2>",
    "<p>今回紹介したアクターモデルの抽象化によって、コードベースが再利用しやすくなる例を紹介します。",
    "実際に私がアプリケーションを書いているのですが、ビットコインの自動取引システムを題材とします。",
    "このサンプルでは 3つのアクターが登場します。</p>",
    "<h4><a aria-hidden=\"true\" class=\"anchor\" href=\"#bitflyer-アクター\" id=\"user-content-bitflyer-アクター\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Bitflyer アクター</h4>",
    "<p>Bitflyer 取引所の API サーバーと WebSocket で接続し、リアルタイムの板情報を受信します。",
    "板のスナップショット情報をもとに、その時点で最も条件の良い指値の値段とサイズ（ここでは、これを Best Bid Offer = BBO とします）を",
    "取得して別のアクターに配信します。</p>",
    "<h4><a aria-hidden=\"true\" class=\"anchor\" href=\"#collector-アクター\" id=\"user-content-collector-アクター\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Collector アクター</h4>",
    "<p>取引所に接続したアクターから配信されるリアルタイム情報をログに書き出します。",
    "今回は BBO を受け取るので <code>Handler&lt;BBO&gt;</code> を実装している必要があります。</p>",
    "<h4><a aria-hidden=\"true\" class=\"anchor\" href=\"#strategy-アクター\" id=\"user-content-strategy-アクター\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>Strategy アクター</h4>",
    "<p>取引所に接続したアクターから配信されるリアルタイム情報をもとに、それを解析して",
    "自動取引の戦略アルゴリズムに従って実際に売買を実行します。",
    "今回は戦略アルゴリズムについては省略します。</p>",
    "<p>さて、自動取引システムを構築する際は、耐障害性やパフォーマンス最適化の観点から",
    "(1) データ収集アプリケーション と (2) 戦略実行アプリケーション を別のコンテナとして",
    "実行したいとします。この時、Bitflyer アクターは両方のアプリケーションで利用できるため、",
    "今回の抽象に依存するアクターのパターンが使用できます。</p>",
    "<p><a href=\"https://github.com/kazukiyoshida/nuxt-blog/blob/master/src/assets/images/20210126/actorModel3.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"actorModel3\" src=\"https://github.com/kazukiyoshida/nuxt-blog/raw/master/src/assets/images/20210126/actorModel3.png\" style=\"max-width:100%;\"/></a></p>",
    "<p>これをコードで表現すると下のようになります。",
    "WebSocket 通信の部分などは省略していますので、気になる方は<a href=\"https://github.com/kazukiyoshida/actor-polymorphism\">ソースコード</a>をご覧下さい。</p>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// Bitflyer 取引所と WebSocket で接続しリアルタイムにデータを受信するアクター</span>",
    "<span class=\"pl-c\">// 受信したデータを解析してサービスアクターT に転送する.</span>",
    "<span class=\"pl-k\">pub</span> <span class=\"pl-k\">struct</span> <span class=\"pl-en\">Bitflyer</span>&lt;T: BBOHandler&gt; {",
    "    sender: Sender,          <span class=\"pl-c\">// Bitflyer 取引所サーバーへメッセージを送信する際に使用する</span>",
    "    service_actor: Addr<span class=\"pl-k\">&lt;</span>T<span class=\"pl-k\">&gt;</span>,  <span class=\"pl-c\">// サービスアクターT のアドレス</span>",
    "}</pre></div>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">BBOHandler</span> = actix::Actor + Handler&lt;UpdateBBO&gt;;</pre></div>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">pub</span> <span class=\"pl-k\">struct</span> <span class=\"pl-en\">Collector</span>;",
    "",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Actor</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Collector</span> { .. }",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Handler</span>&lt;UpdateBBO&gt; <span class=\"pl-k\">for</span> <span class=\"pl-en\">Collector</span> { .. } <span class=\"pl-c\">// データの保存など</span></pre></div>",
    "<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">pub</span> <span class=\"pl-k\">struct</span> <span class=\"pl-en\">Strategy</span>;",
    "",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Actor</span> <span class=\"pl-k\">for</span> <span class=\"pl-en\">Strategy</span> { .. }",
    "<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Handler</span>&lt;UpdateBBO&gt; <span class=\"pl-k\">for</span> <span class=\"pl-en\">Strategy</span> { .. } <span class=\"pl-c\">// 売買の実行など</span></pre></div>",
    "<h2><a aria-hidden=\"true\" class=\"anchor\" href=\"#終わりに\" id=\"user-content-終わりに\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\" fill-rule=\"evenodd\"></path></svg></a>終わりに</h2>",
    "<p>今回は Rust のアクターモデル Actix の紹介と、アクターを抽象化する方法、",
    "そしてビットコイン自動取引システムへの応用について紹介しました。</p>",
    "<p>アクターモデルは通常の Web アプリケーション開発で用いられているレイヤード・アーキテクチャ",
    "とは少し様子が異なるため、どのような構成にするのが良いのか分からず手探りで開発を始めました。",
    "まだまだ勉強不足なので、もっと良いアーキテクチャがあるのかもしれませんが、",
    "これからアクターモデルでアプリケーションを書こうという方の参考に少しでもなれば幸いです。</p>",
    "</article>",
    "</div>"
  ],
  "dir": "src/articles",
  "base": "2021-01-26.json",
  "ext": ".json",
  "sourceBase": "2021-01-26.md",
  "sourceExt": ".md"
}